warning: unused key `dependencies` in [target] config table `cfg(windows)`
   Compiling unicode-ident v1.0.18
   Compiling proc-macro2 v1.0.94
   Compiling version_check v0.9.5
   Compiling serde v1.0.219
   Compiling typenum v1.18.0
   Compiling syn v1.0.109
    Checking cfg-if v1.0.0
   Compiling thiserror v1.0.38
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name unicode_ident --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\unicode-ident-1.0.18\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=85501e4c3fb7d332 -C extra-filename=-d186a595d5eaaaea --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro2-1.0.94\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"proc-macro\"" --cfg "feature=\"span-locations\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"nightly\", \"proc-macro\", \"span-locations\"))" -C metadata=adce599ab1a0e519 -C extra-filename=-4ee3621c17e95fbe --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\proc-macro2-4ee3621c17e95fbe -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name version_check --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\version_check-0.9.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=4f5b56f9611a8173 -C extra-filename=-b615fbadb7e30480 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"serde_derive\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"derive\", \"rc\", \"serde_derive\", \"std\", \"unstable\"))" -C metadata=1c621be6155191b9 -C extra-filename=-ae4adec6d9f9f2f7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\serde-ae4adec6d9f9f2f7 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\typenum-1.18.0\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"const-generics\", \"force_unix_path_separator\", \"i128\", \"no_std\", \"scale-info\", \"scale_info\", \"strict\"))" -C metadata=753f2ae258e657eb -C extra-filename=-269724100edf2967 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\typenum-269724100edf2967 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\syn-1.0.109\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"clone-impls\"" --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"extra-traits\"" --cfg "feature=\"fold\"" --cfg "feature=\"full\"" --cfg "feature=\"parsing\"" --cfg "feature=\"printing\"" --cfg "feature=\"proc-macro\"" --cfg "feature=\"quote\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"test\", \"visit\", \"visit-mut\"))" -C metadata=db2d8d6aea2a6f69 -C extra-filename=-42e461e7fb8af394 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\syn-42e461e7fb8af394 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\thiserror-1.0.38\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=723c02c110dd6a8c -C extra-filename=-f82f84c61a8d03cd --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\thiserror-f82f84c61a8d03cd -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name cfg_if --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cfg-if-1.0.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"compiler_builtins\", \"core\", \"rustc-dep-of-std\"))" -C metadata=61b861f0f2451f72 -C extra-filename=-0bbb4ae55c831e4c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling anyhow v1.0.97
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anyhow-1.0.97\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"backtrace\", \"default\", \"std\"))" -C metadata=73e5fa908ac8286f -C extra-filename=-e8aad91f78266d6b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\anyhow-e8aad91f78266d6b -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling semver v1.0.26
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\semver-1.0.26\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"serde\", \"std\"))" -C metadata=9c5297807ecee52b -C extra-filename=-cc4b5efa2e6ffaf5 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\semver-cc4b5efa2e6ffaf5 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\serde-ae4adec6d9f9f2f7\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\proc-macro2-4ee3621c17e95fbe\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\thiserror-f82f84c61a8d03cd\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\syn-42e461e7fb8af394\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\typenum-269724100edf2967\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\anyhow-e8aad91f78266d6b\build-script-build`
   Compiling generic-array v0.14.7
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\semver-cc4b5efa2e6ffaf5\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\generic-array-0.14.7\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"more_lengths\", \"serde\", \"zeroize\"))" -C metadata=02df2346a68b6a23 -C extra-filename=-f99dad5acebe1773 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\generic-array-f99dad5acebe1773 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern version_check=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libversion_check-b615fbadb7e30480.rlib --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\generic-array-0.14.7\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"more_lengths\"" --cfg "feature=\"serde\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"more_lengths\", \"serde\", \"zeroize\"))" -C metadata=1bcbdccdbff93486 -C extra-filename=-fc15b38286c9430f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\generic-array-fc15b38286c9430f -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern version_check=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libversion_check-b615fbadb7e30480.rlib --cap-lints allow -C target-cpu=native`
   Compiling crunchy v0.2.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\crunchy-0.2.3\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"limit_128\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"limit_1024\", \"limit_128\", \"limit_2048\", \"limit_256\", \"limit_512\", \"limit_64\", \"std\"))" -C metadata=914ad63acb3c64fb -C extra-filename=-d9644e9414c5bd76 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\crunchy-d9644e9414c5bd76 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name typenum --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\typenum-1.18.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"const-generics\", \"force_unix_path_separator\", \"i128\", \"no_std\", \"scale-info\", \"scale_info\", \"strict\"))" -C metadata=d45403666d6c7daa -C extra-filename=-721a0ac10eff8b19 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name proc_macro2 --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro2-1.0.94\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"proc-macro\"" --cfg "feature=\"span-locations\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"nightly\", \"proc-macro\", \"span-locations\"))" -C metadata=8ec75ac723930508 -C extra-filename=-c9b758d1c4962405 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern unicode_ident=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libunicode_ident-d186a595d5eaaaea.rmeta --cap-lints allow -C target-cpu=native --cfg span_locations --cfg wrap_proc_macro --check-cfg cfg(fuzzing) --check-cfg cfg(no_is_available) --check-cfg cfg(no_literal_byte_character) --check-cfg cfg(no_literal_c_string) --check-cfg cfg(no_source_text) --check-cfg cfg(proc_macro_span) --check-cfg cfg(procmacro2_backtrace) --check-cfg cfg(procmacro2_nightly_testing) --check-cfg cfg(procmacro2_semver_exempt) --check-cfg cfg(randomize_layout) --check-cfg cfg(span_locations) --check-cfg cfg(super_unstable) --check-cfg cfg(wrap_proc_macro)`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name typenum --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\typenum-1.18.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"const-generics\", \"force_unix_path_separator\", \"i128\", \"no_std\", \"scale-info\", \"scale_info\", \"strict\"))" -C metadata=47145bdac1589e60 -C extra-filename=-e357d787e741afdb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name semver --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\semver-1.0.26\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"serde\", \"std\"))" -C metadata=e27a8740683570a1 -C extra-filename=-881a7eb073492a85 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native --check-cfg cfg(no_alloc_crate) --check-cfg cfg(no_const_vec_new) --check-cfg cfg(no_exhaustive_int_match) --check-cfg cfg(no_non_exhaustive) --check-cfg cfg(no_nonzero_bitscan) --check-cfg cfg(no_str_strip_prefix) --check-cfg cfg(no_track_caller) --check-cfg cfg(no_unsafe_op_in_unsafe_fn_lint) --check-cfg cfg(test_node_semver)`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anyhow --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anyhow-1.0.97\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"backtrace\", \"default\", \"std\"))" -C metadata=93643795cf1c5e33 -C extra-filename=-9ed3147a547d5ca1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native --cfg std_backtrace --check-cfg cfg(anyhow_nightly_testing) --check-cfg cfg(anyhow_no_core_error) --check-cfg cfg(anyhow_no_core_unwind_safe) --check-cfg cfg(anyhow_no_fmt_arguments_as_str) --check-cfg cfg(anyhow_no_ptr_addr_of) --check-cfg cfg(anyhow_no_unsafe_op_in_unsafe_fn_lint) --check-cfg cfg(error_generic_member_access) --check-cfg cfg(std_backtrace)`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\generic-array-f99dad5acebe1773\build-script-build`
   Compiling windows_x86_64_msvc v0.52.6
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\generic-array-fc15b38286c9430f\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=63c4ab08a8a7ba60 -C extra-filename=-6cf5c480a3b454e7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\windows_x86_64_msvc-6cf5c480a3b454e7 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\crunchy-d9644e9414c5bd76\build-script-build`
   Compiling memchr v2.7.4
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name generic_array --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\generic-array-0.14.7\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"more_lengths\", \"serde\", \"zeroize\"))" -C metadata=a3dfed372f17c98a -C extra-filename=-ea4e9bd8f2a14404 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern typenum=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtypenum-721a0ac10eff8b19.rmeta --cap-lints allow -C target-cpu=native --cfg relaxed_coherence`
   Compiling rustc_version v0.4.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name memchr --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\memchr-2.7.4\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"compiler_builtins\", \"core\", \"default\", \"libc\", \"logging\", \"rustc-dep-of-std\", \"std\", \"use_std\"))" -C metadata=1b37558b87ef81a1 -C extra-filename=-5e3540f72e1169fa --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name rustc_version --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rustc_version-0.4.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=84a156acedc60be7 -C extra-filename=-16e470730bd7bb08 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern semver=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsemver-881a7eb073492a85.rmeta --cap-lints allow -C target-cpu=native`
    Checking subtle v2.4.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name subtle --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\subtle-2.4.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"i128\", \"nightly\", \"std\"))" -C metadata=d243d7a31ee0fa96 -C extra-filename=-f7eeb6269ad54a50 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling quote v1.0.40
   Compiling proc-macro2-diagnostics v0.9.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name quote --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\quote-1.0.40\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"proc-macro\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"proc-macro\"))" -C metadata=1a2a9f773c8c3f51 -C extra-filename=-73b6963fd7bfb93c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro2-diagnostics-0.9.1\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"colors\"" --cfg "feature=\"default\"" --cfg "feature=\"yansi\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"colors\", \"default\", \"yansi\"))" -C metadata=bdfe7f3dbcce00cb -C extra-filename=-32e4daa7cb4f8204 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\proc-macro2-diagnostics-32e4daa7cb4f8204 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern version_check=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libversion_check-b615fbadb7e30480.rlib --cap-lints allow -C target-cpu=native`
   Compiling getrandom v0.1.16
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\getrandom-0.1.16\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"bindgen\", \"compiler_builtins\", \"core\", \"dummy\", \"js-sys\", \"log\", \"rustc-dep-of-std\", \"std\", \"stdweb\", \"test-in-browser\", \"wasm-bindgen\"))" -C metadata=f98c61eb2d2bc183 -C extra-filename=-e60c8459bcea1a9f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\getrandom-e60c8459bcea1a9f -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling syn v2.0.100
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name syn --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\syn-2.0.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"clone-impls\"" --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"full\"" --cfg "feature=\"parsing\"" --cfg "feature=\"printing\"" --cfg "feature=\"proc-macro\"" --cfg "feature=\"visit\"" --cfg "feature=\"visit-mut\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"test\", \"visit\", \"visit-mut\"))" -C metadata=a2bc98e914b3a503 -C extra-filename=-34720c7bebe5cd54 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern unicode_ident=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libunicode_ident-d186a595d5eaaaea.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name syn --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\syn-1.0.109\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"clone-impls\"" --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"extra-traits\"" --cfg "feature=\"fold\"" --cfg "feature=\"full\"" --cfg "feature=\"parsing\"" --cfg "feature=\"printing\"" --cfg "feature=\"proc-macro\"" --cfg "feature=\"quote\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"test\", \"visit\", \"visit-mut\"))" -C metadata=27d095a46f2cf17c -C extra-filename=-f9b3a22918ac187a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern unicode_ident=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libunicode_ident-d186a595d5eaaaea.rmeta --cap-lints allow -C target-cpu=native --cfg syn_disable_nightly_tests`
   Compiling digest v0.9.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name digest --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\digest-0.9.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"blobby\", \"dev\", \"std\"))" -C metadata=011f41739dd854cf -C extra-filename=-71273a10f79b8a88 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-ea4e9bd8f2a14404.rmeta --cap-lints allow -C target-cpu=native`
   Compiling serde_json v1.0.140
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.140\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"arbitrary_precision\", \"default\", \"float_roundtrip\", \"indexmap\", \"preserve_order\", \"raw_value\", \"std\", \"unbounded_depth\"))" -C metadata=5857904e06213ecd -C extra-filename=-6a699c64849c36ba --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\serde_json-6a699c64849c36ba -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\windows_x86_64_msvc-6cf5c480a3b454e7\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name windows_x86_64_msvc --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=514acdf786e4ebb7 -C extra-filename=-56f758d8617ab2fd --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\getrandom-e60c8459bcea1a9f\build-script-build`
    Checking windows-targets v0.52.6
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name windows_targets --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows-targets-0.52.6\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --warn=rust_2018_idioms --warn=unexpected_cfgs --warn=missing_docs --check-cfg "cfg(windows_raw_dylib, windows_debugger_visualizer, windows_slim_errors)" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=2bc240badec04035 -C extra-filename=-11d4d5ccdf788bd1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern windows_x86_64_msvc=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwindows_x86_64_msvc-56f758d8617ab2fd.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\proc-macro2-diagnostics-32e4daa7cb4f8204\build-script-build`
   Compiling block-buffer v0.9.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name block_buffer --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\block-buffer-0.9.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"block-padding\"))" -C metadata=5d3d35443782b625 -C extra-filename=-02938257eb18b5f8 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-ea4e9bd8f2a14404.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\serde_json-6a699c64849c36ba\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name cfg_if --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cfg-if-1.0.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"compiler_builtins\", \"core\", \"rustc-dep-of-std\"))" -C metadata=3859fb0619466bc0 -C extra-filename=-2e291ac695844e5d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name crunchy --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\crunchy-0.2.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"limit_128\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"limit_1024\", \"limit_128\", \"limit_2048\", \"limit_256\", \"limit_512\", \"limit_64\", \"std\"))" -C metadata=c99ef0e8e105c3c8 -C extra-filename=-893a9dbd64cc40a4 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling ryu v1.0.20
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name ryu --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\ryu-1.0.20\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no-panic\", \"small\"))" -C metadata=d032dcbc1e7a25ac -C extra-filename=-77128e2f73f1f485 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling yansi v0.5.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name yansi --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\yansi-0.5.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=fe87d7f5a935d830 -C extra-filename=-e44a0a8aa0eb0562 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling winapi v0.3.9
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winapi-0.3.9\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"consoleapi\"" --cfg "feature=\"minwinbase\"" --cfg "feature=\"minwindef\"" --cfg "feature=\"processenv\"" --cfg "feature=\"winbase\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"accctrl\", \"aclapi\", \"activation\", \"adhoc\", \"appmgmt\", \"audioclient\", \"audiosessiontypes\", \"avrt\", \"basetsd\", \"bcrypt\", \"bits\", \"bits10_1\", \"bits1_5\", \"bits2_0\", \"bits2_5\", \"bits3_0\", \"bits4_0\", \"bits5_0\", \"bitscfg\", \"bitsmsg\", \"bluetoothapis\", \"bluetoothleapis\", \"bthdef\", \"bthioctl\", \"bthledef\", \"bthsdpdef\", \"bugcodes\", \"cderr\", \"cfg\", \"cfgmgr32\", \"cguid\", \"combaseapi\", \"coml2api\", \"commapi\", \"commctrl\", \"commdlg\", \"commoncontrols\", \"consoleapi\", \"corecrt\", \"corsym\", \"d2d1\", \"d2d1_1\", \"d2d1_2\", \"d2d1_3\", \"d2d1effectauthor\", \"d2d1effects\", \"d2d1effects_1\", \"d2d1effects_2\", \"d2d1svg\", \"d2dbasetypes\", \"d3d\", \"d3d10\", \"d3d10_1\", \"d3d10_1shader\", \"d3d10effect\", \"d3d10misc\", \"d3d10sdklayers\", \"d3d10shader\", \"d3d11\", \"d3d11_1\", \"d3d11_2\", \"d3d11_3\", \"d3d11_4\", \"d3d11on12\", \"d3d11sdklayers\", \"d3d11shader\", \"d3d11tokenizedprogramformat\", \"d3d12\", \"d3d12sdklayers\", \"d3d12shader\", \"d3d9\", \"d3d9caps\", \"d3d9types\", \"d3dcommon\", \"d3dcompiler\", \"d3dcsx\", \"d3dkmdt\", \"d3dkmthk\", \"d3dukmdt\", \"d3dx10core\", \"d3dx10math\", \"d3dx10mesh\", \"datetimeapi\", \"davclnt\", \"dbghelp\", \"dbt\", \"dcommon\", \"dcomp\", \"dcompanimation\", \"dcomptypes\", \"dde\", \"ddraw\", \"ddrawi\", \"ddrawint\", \"debug\", \"debugapi\", \"devguid\", \"devicetopology\", \"devpkey\", \"devpropdef\", \"dinput\", \"dinputd\", \"dispex\", \"dmksctl\", \"dmusicc\", \"docobj\", \"documenttarget\", \"dot1x\", \"dpa_dsa\", \"dpapi\", \"dsgetdc\", \"dsound\", \"dsrole\", \"dvp\", \"dwmapi\", \"dwrite\", \"dwrite_1\", \"dwrite_2\", \"dwrite_3\", \"dxdiag\", \"dxfile\", \"dxgi\", \"dxgi1_2\", \"dxgi1_3\", \"dxgi1_4\", \"dxgi1_5\", \"dxgi1_6\", \"dxgidebug\", \"dxgiformat\", \"dxgitype\", \"dxva2api\", \"dxvahd\", \"eaptypes\", \"enclaveapi\", \"endpointvolume\", \"errhandlingapi\", \"everything\", \"evntcons\", \"evntprov\", \"evntrace\", \"excpt\", \"exdisp\", \"fibersapi\", \"fileapi\", \"functiondiscoverykeys_devpkey\", \"gl-gl\", \"guiddef\", \"handleapi\", \"heapapi\", \"hidclass\", \"hidpi\", \"hidsdi\", \"hidusage\", \"highlevelmonitorconfigurationapi\", \"hstring\", \"http\", \"ifdef\", \"ifmib\", \"imm\", \"impl-debug\", \"impl-default\", \"in6addr\", \"inaddr\", \"inspectable\", \"interlockedapi\", \"intsafe\", \"ioapiset\", \"ipexport\", \"iphlpapi\", \"ipifcons\", \"ipmib\", \"iprtrmib\", \"iptypes\", \"jobapi\", \"jobapi2\", \"knownfolders\", \"ks\", \"ksmedia\", \"ktmtypes\", \"ktmw32\", \"l2cmn\", \"libloaderapi\", \"limits\", \"lmaccess\", \"lmalert\", \"lmapibuf\", \"lmat\", \"lmcons\", \"lmdfs\", \"lmerrlog\", \"lmjoin\", \"lmmsg\", \"lmremutl\", \"lmrepl\", \"lmserver\", \"lmshare\", \"lmstats\", \"lmsvc\", \"lmuse\", \"lmwksta\", \"lowlevelmonitorconfigurationapi\", \"lsalookup\", \"memoryapi\", \"minschannel\", \"minwinbase\", \"minwindef\", \"mmdeviceapi\", \"mmeapi\", \"mmreg\", \"mmsystem\", \"mprapidef\", \"msaatext\", \"mscat\", \"mschapp\", \"mssip\", \"mstcpip\", \"mswsock\", \"mswsockdef\", \"namedpipeapi\", \"namespaceapi\", \"nb30\", \"ncrypt\", \"netioapi\", \"nldef\", \"ntddndis\", \"ntddscsi\", \"ntddser\", \"ntdef\", \"ntlsa\", \"ntsecapi\", \"ntstatus\", \"oaidl\", \"objbase\", \"objidl\", \"objidlbase\", \"ocidl\", \"ole2\", \"oleauto\", \"olectl\", \"oleidl\", \"opmapi\", \"pdh\", \"perflib\", \"physicalmonitorenumerationapi\", \"playsoundapi\", \"portabledevice\", \"portabledeviceapi\", \"portabledevicetypes\", \"powerbase\", \"powersetting\", \"powrprof\", \"processenv\", \"processsnapshot\", \"processthreadsapi\", \"processtopologyapi\", \"profileapi\", \"propidl\", \"propkey\", \"propkeydef\", \"propsys\", \"prsht\", \"psapi\", \"qos\", \"realtimeapiset\", \"reason\", \"restartmanager\", \"restrictederrorinfo\", \"rmxfguid\", \"roapi\", \"robuffer\", \"roerrorapi\", \"rpc\", \"rpcdce\", \"rpcndr\", \"rtinfo\", \"sapi\", \"sapi51\", \"sapi53\", \"sapiddk\", \"sapiddk51\", \"schannel\", \"sddl\", \"securityappcontainer\", \"securitybaseapi\", \"servprov\", \"setupapi\", \"shellapi\", \"shellscalingapi\", \"shlobj\", \"shobjidl\", \"shobjidl_core\", \"shtypes\", \"softpub\", \"spapidef\", \"spellcheck\", \"sporder\", \"sql\", \"sqlext\", \"sqltypes\", \"sqlucode\", \"sspi\", \"std\", \"stralign\", \"stringapiset\", \"strmif\", \"subauth\", \"synchapi\", \"sysinfoapi\", \"systemtopologyapi\", \"taskschd\", \"tcpestats\", \"tcpmib\", \"textstor\", \"threadpoolapiset\", \"threadpoollegacyapiset\", \"timeapi\", \"timezoneapi\", \"tlhelp32\", \"transportsettingcommon\", \"tvout\", \"udpmib\", \"unknwnbase\", \"urlhist\", \"urlmon\", \"usb\", \"usbioctl\", \"usbiodef\", \"usbscan\", \"usbspec\", \"userenv\", \"usp10\", \"utilapiset\", \"uxtheme\", \"vadefs\", \"vcruntime\", \"vsbackup\", \"vss\", \"vsserror\", \"vswriter\", \"wbemads\", \"wbemcli\", \"wbemdisp\", \"wbemprov\", \"wbemtran\", \"wct\", \"werapi\", \"winbase\", \"wincodec\", \"wincodecsdk\", \"wincon\", \"wincontypes\", \"wincred\", \"wincrypt\", \"windef\", \"windot11\", \"windowsceip\", \"windowsx\", \"winefs\", \"winerror\", \"winevt\", \"wingdi\", \"winhttp\", \"wininet\", \"winineti\", \"winioctl\", \"winnetwk\", \"winnls\", \"winnt\", \"winreg\", \"winsafer\", \"winscard\", \"winsmcrd\", \"winsock2\", \"winspool\", \"winstring\", \"winsvc\", \"wintrust\", \"winusb\", \"winusbio\", \"winuser\", \"winver\", \"wlanapi\", \"wlanihv\", \"wlanihvtypes\", \"wlantypes\", \"wlclient\", \"wmistr\", \"wnnc\", \"wow64apiset\", \"wpdmtpextensions\", \"ws2bth\", \"ws2def\", \"ws2ipdef\", \"ws2spi\", \"ws2tcpip\", \"wtsapi32\", \"wtypes\", \"wtypesbase\", \"xinput\"))" -C metadata=aff177616e6e8b44 -C extra-filename=-a3ef194c1aebbeef --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\winapi-a3ef194c1aebbeef -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling unicode-segmentation v1.12.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name unicode_segmentation --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\unicode-segmentation-1.12.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no_std\"))" -C metadata=89804451e187747e -C extra-filename=-f09efd1d67ac2a9f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling itoa v1.0.15
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name itoa --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\itoa-1.0.15\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no-panic\"))" -C metadata=60400a074b1d3953 -C extra-filename=-2e47f628521f3c88 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling wasm-bindgen-shared v0.2.100
   Compiling zerocopy v0.8.24
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-shared-0.2.100\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=453bf3e39b8837d6 -C extra-filename=-f13f5782fcd3f1f2 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\wasm-bindgen-shared-f13f5782fcd3f1f2 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling opaque-debug v0.3.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name opaque_debug --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\opaque-debug-0.3.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=7a1d5bd5144efb20 -C extra-filename=-b737ce77821c776f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\zerocopy-0.8.24\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"simd\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"__internal_use_only_features_that_work_on_stable\", \"alloc\", \"derive\", \"float-nightly\", \"simd\", \"simd-nightly\", \"std\", \"zerocopy-derive\"))" -C metadata=5249447cc653e443 -C extra-filename=-ccabb1f0faedf358 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\zerocopy-ccabb1f0faedf358 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name subtle --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\subtle-2.4.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"i128\", \"nightly\", \"std\"))" -C metadata=de9b27f33c7b36c0 -C extra-filename=-c30a2564de115396 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name memchr --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\memchr-2.7.4\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"compiler_builtins\", \"core\", \"default\", \"libc\", \"logging\", \"rustc-dep-of-std\", \"std\", \"use_std\"))" -C metadata=f89637c5d17c68e1 -C extra-filename=-2db820fb1ffcf981 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling cpufeatures v0.2.17
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name cpufeatures --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cpufeatures-0.2.17\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=f032c3494d5a7b68 -C extra-filename=-c3591f3268e39fef --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling heck v0.3.3
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\wasm-bindgen-shared-f13f5782fcd3f1f2\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name heck --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\heck-0.3.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=c192f37520a7eaa2 -C extra-filename=-37547b579ff1d4de --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern unicode_segmentation=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libunicode_segmentation-f09efd1d67ac2a9f.rmeta --cap-lints allow -C target-cpu=native`
   Compiling sha2 v0.9.9
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name sha2 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\sha2-0.9.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"asm\", \"asm-aarch64\", \"compress\", \"default\", \"force-soft\", \"sha2-asm\", \"std\"))" -C metadata=6553126d642082a5 -C extra-filename=-8a094d2597201d0c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern block_buffer=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblock_buffer-02938257eb18b5f8.rmeta --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-2e291ac695844e5d.rmeta --extern cpufeatures=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcpufeatures-c3591f3268e39fef.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-71273a10f79b8a88.rmeta --extern opaque_debug=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libopaque_debug-b737ce77821c776f.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\winapi-a3ef194c1aebbeef\build-script-build`
   Compiling libsecp256k1-core v0.2.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name libsecp256k1_core --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-core-0.2.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"std\"))" -C metadata=54fd25e360bdbca0 -C extra-filename=-e3473678399f948b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern crunchy=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcrunchy-893a9dbd64cc40a4.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-71273a10f79b8a88.rmeta --extern subtle=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsubtle-c30a2564de115396.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\zerocopy-ccabb1f0faedf358\build-script-build`
    Checking aho-corasick v1.1.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name aho_corasick --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\aho-corasick-1.1.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"perf-literal\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"logging\", \"perf-literal\", \"std\"))" -C metadata=88e916c7eae0b4e0 -C extra-filename=-4834d0c2cc2aecc0 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-2db820fb1ffcf981.rmeta --cap-lints allow -C target-cpu=native`
    Checking windows-sys v0.59.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name windows_sys --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows-sys-0.59.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --warn=rust_2018_idioms --warn=unexpected_cfgs --warn=missing_docs --check-cfg "cfg(windows_raw_dylib, windows_debugger_visualizer, windows_slim_errors)" --cfg "feature=\"Win32\"" --cfg "feature=\"Win32_Foundation\"" --cfg "feature=\"Win32_Storage\"" --cfg "feature=\"Win32_Storage_FileSystem\"" --cfg "feature=\"Win32_System\"" --cfg "feature=\"Win32_System_Console\"" --cfg "feature=\"Win32_System_SystemInformation\"" --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"Wdk\", \"Wdk_Devices\", \"Wdk_Devices_Bluetooth\", \"Wdk_Devices_HumanInterfaceDevice\", \"Wdk_Foundation\", \"Wdk_Graphics\", \"Wdk_Graphics_Direct3D\", \"Wdk_NetworkManagement\", \"Wdk_NetworkManagement_Ndis\", \"Wdk_NetworkManagement_WindowsFilteringPlatform\", \"Wdk_Storage\", \"Wdk_Storage_FileSystem\", \"Wdk_Storage_FileSystem_Minifilters\", \"Wdk_System\", \"Wdk_System_IO\", \"Wdk_System_Memory\", \"Wdk_System_OfflineRegistry\", \"Wdk_System_Registry\", \"Wdk_System_SystemInformation\", \"Wdk_System_SystemServices\", \"Wdk_System_Threading\", \"Win32\", \"Win32_Data\", \"Win32_Data_HtmlHelp\", \"Win32_Data_RightsManagement\", \"Win32_Devices\", \"Win32_Devices_AllJoyn\", \"Win32_Devices_BiometricFramework\", \"Win32_Devices_Bluetooth\", \"Win32_Devices_Communication\", \"Win32_Devices_DeviceAndDriverInstallation\", \"Win32_Devices_DeviceQuery\", \"Win32_Devices_Display\", \"Win32_Devices_Enumeration\", \"Win32_Devices_Enumeration_Pnp\", \"Win32_Devices_Fax\", \"Win32_Devices_HumanInterfaceDevice\", \"Win32_Devices_PortableDevices\", \"Win32_Devices_Properties\", \"Win32_Devices_Pwm\", \"Win32_Devices_Sensors\", \"Win32_Devices_SerialCommunication\", \"Win32_Devices_Tapi\", \"Win32_Devices_Usb\", \"Win32_Devices_WebServicesOnDevices\", \"Win32_Foundation\", \"Win32_Gaming\", \"Win32_Globalization\", \"Win32_Graphics\", \"Win32_Graphics_Dwm\", \"Win32_Graphics_Gdi\", \"Win32_Graphics_GdiPlus\", \"Win32_Graphics_Hlsl\", \"Win32_Graphics_OpenGL\", \"Win32_Graphics_Printing\", \"Win32_Graphics_Printing_PrintTicket\", \"Win32_Management\", \"Win32_Management_MobileDeviceManagementRegistration\", \"Win32_Media\", \"Win32_Media_Audio\", \"Win32_Media_DxMediaObjects\", \"Win32_Media_KernelStreaming\", \"Win32_Media_Multimedia\", \"Win32_Media_Streaming\", \"Win32_Media_WindowsMediaFormat\", \"Win32_NetworkManagement\", \"Win32_NetworkManagement_Dhcp\", \"Win32_NetworkManagement_Dns\", \"Win32_NetworkManagement_InternetConnectionWizard\", \"Win32_NetworkManagement_IpHelper\", \"Win32_NetworkManagement_Multicast\", \"Win32_NetworkManagement_Ndis\", \"Win32_NetworkManagement_NetBios\", \"Win32_NetworkManagement_NetManagement\", \"Win32_NetworkManagement_NetShell\", \"Win32_NetworkManagement_NetworkDiagnosticsFramework\", \"Win32_NetworkManagement_P2P\", \"Win32_NetworkManagement_QoS\", \"Win32_NetworkManagement_Rras\", \"Win32_NetworkManagement_Snmp\", \"Win32_NetworkManagement_WNet\", \"Win32_NetworkManagement_WebDav\", \"Win32_NetworkManagement_WiFi\", \"Win32_NetworkManagement_WindowsConnectionManager\", \"Win32_NetworkManagement_WindowsFilteringPlatform\", \"Win32_NetworkManagement_WindowsFirewall\", \"Win32_NetworkManagement_WindowsNetworkVirtualization\", \"Win32_Networking\", \"Win32_Networking_ActiveDirectory\", \"Win32_Networking_Clustering\", \"Win32_Networking_HttpServer\", \"Win32_Networking_Ldap\", \"Win32_Networking_WebSocket\", \"Win32_Networking_WinHttp\", \"Win32_Networking_WinInet\", \"Win32_Networking_WinSock\", \"Win32_Networking_WindowsWebServices\", \"Win32_Security\", \"Win32_Security_AppLocker\", \"Win32_Security_Authentication\", \"Win32_Security_Authentication_Identity\", \"Win32_Security_Authorization\", \"Win32_Security_Credentials\", \"Win32_Security_Cryptography\", \"Win32_Security_Cryptography_Catalog\", \"Win32_Security_Cryptography_Certificates\", \"Win32_Security_Cryptography_Sip\", \"Win32_Security_Cryptography_UI\", \"Win32_Security_DiagnosticDataQuery\", \"Win32_Security_DirectoryServices\", \"Win32_Security_EnterpriseData\", \"Win32_Security_ExtensibleAuthenticationProtocol\", \"Win32_Security_Isolation\", \"Win32_Security_LicenseProtection\", \"Win32_Security_NetworkAccessProtection\", \"Win32_Security_WinTrust\", \"Win32_Security_WinWlx\", \"Win32_Storage\", \"Win32_Storage_Cabinets\", \"Win32_Storage_CloudFilters\", \"Win32_Storage_Compression\", \"Win32_Storage_DistributedFileSystem\", \"Win32_Storage_FileHistory\", \"Win32_Storage_FileSystem\", \"Win32_Storage_Imapi\", \"Win32_Storage_IndexServer\", \"Win32_Storage_InstallableFileSystems\", \"Win32_Storage_IscsiDisc\", \"Win32_Storage_Jet\", \"Win32_Storage_Nvme\", \"Win32_Storage_OfflineFiles\", \"Win32_Storage_OperationRecorder\", \"Win32_Storage_Packaging\", \"Win32_Storage_Packaging_Appx\", \"Win32_Storage_ProjectedFileSystem\", \"Win32_Storage_StructuredStorage\", \"Win32_Storage_Vhd\", \"Win32_Storage_Xps\", \"Win32_System\", \"Win32_System_AddressBook\", \"Win32_System_Antimalware\", \"Win32_System_ApplicationInstallationAndServicing\", \"Win32_System_ApplicationVerifier\", \"Win32_System_ClrHosting\", \"Win32_System_Com\", \"Win32_System_Com_Marshal\", \"Win32_System_Com_StructuredStorage\", \"Win32_System_Com_Urlmon\", \"Win32_System_ComponentServices\", \"Win32_System_Console\", \"Win32_System_CorrelationVector\", \"Win32_System_DataExchange\", \"Win32_System_DeploymentServices\", \"Win32_System_DeveloperLicensing\", \"Win32_System_Diagnostics\", \"Win32_System_Diagnostics_Ceip\", \"Win32_System_Diagnostics_Debug\", \"Win32_System_Diagnostics_Debug_Extensions\", \"Win32_System_Diagnostics_Etw\", \"Win32_System_Diagnostics_ProcessSnapshotting\", \"Win32_System_Diagnostics_ToolHelp\", \"Win32_System_Diagnostics_TraceLogging\", \"Win32_System_DistributedTransactionCoordinator\", \"Win32_System_Environment\", \"Win32_System_ErrorReporting\", \"Win32_System_EventCollector\", \"Win32_System_EventLog\", \"Win32_System_EventNotificationService\", \"Win32_System_GroupPolicy\", \"Win32_System_HostCompute\", \"Win32_System_HostComputeNetwork\", \"Win32_System_HostComputeSystem\", \"Win32_System_Hypervisor\", \"Win32_System_IO\", \"Win32_System_Iis\", \"Win32_System_Ioctl\", \"Win32_System_JobObjects\", \"Win32_System_Js\", \"Win32_System_Kernel\", \"Win32_System_LibraryLoader\", \"Win32_System_Mailslots\", \"Win32_System_Mapi\", \"Win32_System_Memory\", \"Win32_System_Memory_NonVolatile\", \"Win32_System_MessageQueuing\", \"Win32_System_MixedReality\", \"Win32_System_Ole\", \"Win32_System_PasswordManagement\", \"Win32_System_Performance\", \"Win32_System_Performance_HardwareCounterProfiling\", \"Win32_System_Pipes\", \"Win32_System_Power\", \"Win32_System_ProcessStatus\", \"Win32_System_Recovery\", \"Win32_System_Registry\", \"Win32_System_RemoteDesktop\", \"Win32_System_RemoteManagement\", \"Win32_System_RestartManager\", \"Win32_System_Restore\", \"Win32_System_Rpc\", \"Win32_System_Search\", \"Win32_System_Search_Common\", \"Win32_System_SecurityCenter\", \"Win32_System_Services\", \"Win32_System_SetupAndMigration\", \"Win32_System_Shutdown\", \"Win32_System_StationsAndDesktops\", \"Win32_System_SubsystemForLinux\", \"Win32_System_SystemInformation\", \"Win32_System_SystemServices\", \"Win32_System_Threading\", \"Win32_System_Time\", \"Win32_System_TpmBaseServices\", \"Win32_System_UserAccessLogging\", \"Win32_System_Variant\", \"Win32_System_VirtualDosMachines\", \"Win32_System_WindowsProgramming\", \"Win32_System_Wmi\", \"Win32_UI\", \"Win32_UI_Accessibility\", \"Win32_UI_ColorSystem\", \"Win32_UI_Controls\", \"Win32_UI_Controls_Dialogs\", \"Win32_UI_HiDpi\", \"Win32_UI_Input\", \"Win32_UI_Input_Ime\", \"Win32_UI_Input_KeyboardAndMouse\", \"Win32_UI_Input_Pointer\", \"Win32_UI_Input_Touch\", \"Win32_UI_Input_XboxController\", \"Win32_UI_InteractionContext\", \"Win32_UI_Magnification\", \"Win32_UI_Shell\", \"Win32_UI_Shell_Common\", \"Win32_UI_Shell_PropertiesSystem\", \"Win32_UI_TabletPC\", \"Win32_UI_TextServices\", \"Win32_UI_WindowsAndMessaging\", \"Win32_Web\", \"Win32_Web_InternetExplorer\", \"default\", \"docs\"))" -C metadata=8fef18c3f72d8233 -C extra-filename=-98691cf4a5d69ad0 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern windows_targets=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwindows_targets-11d4d5ccdf788bd1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name getrandom --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\getrandom-0.1.16\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"bindgen\", \"compiler_builtins\", \"core\", \"dummy\", \"js-sys\", \"log\", \"rustc-dep-of-std\", \"std\", \"stdweb\", \"test-in-browser\", \"wasm-bindgen\"))" -C metadata=b11988813ad5a9ab -C extra-filename=-97573c5bec270336 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-0bbb4ae55c831e4c.rmeta --cap-lints allow -C target-cpu=native -l advapi32`
   Compiling rustversion v1.0.20
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rustversion-1.0.20\build\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=efcc89c4423694b7 -C extra-filename=-fcc2730f29e7624e --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\rustversion-fcc2730f29e7624e -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking block-padding v0.2.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name block_padding --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\block-padding-0.2.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=4059969c1fc4c907 -C extra-filename=-7e3a3841fd5430cf --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling bs58 v0.3.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bs58 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bs58-0.3.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"check\", \"default\", \"sha2\", \"std\"))" -C metadata=eb944dcac0794ae4 -C extra-filename=-067b26eaf93b8f74 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking regex-syntax v0.8.5
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex_syntax --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-syntax-0.8.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"arbitrary\", \"default\", \"std\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\"))" -C metadata=095c6012cef11b81 -C extra-filename=-85078768127e6b69 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\rustversion-fcc2730f29e7624e\build-script-build`
    Checking rand_core v0.5.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name rand_core --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rand_core-0.5.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"getrandom\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"getrandom\", \"serde\", \"serde1\", \"std\"))" -C metadata=926dc8e7d936173d -C extra-filename=-d698ff5f7d71230c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern getrandom=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgetrandom-97573c5bec270336.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name zerocopy --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\zerocopy-0.8.24\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"simd\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"__internal_use_only_features_that_work_on_stable\", \"alloc\", \"derive\", \"float-nightly\", \"simd\", \"simd-nightly\", \"std\", \"zerocopy-derive\"))" -C metadata=64bd3eca17ec1a8c -C extra-filename=-ab67f1fc1b2cfbc8 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native --cfg zerocopy_aarch64_simd_1_59_0 --cfg zerocopy_core_error_1_81_0 --cfg zerocopy_diagnostic_on_unimplemented_1_78_0 --cfg zerocopy_generic_bounds_in_const_fn_1_61_0 --cfg zerocopy_panic_in_const_and_vec_try_reserve_1_57_0 --cfg zerocopy_target_has_atomics_1_60_0 --check-cfg cfg(zerocopy_aarch64_simd_1_59_0) --check-cfg cfg(zerocopy_core_error_1_81_0) --check-cfg cfg(zerocopy_diagnostic_on_unimplemented_1_78_0) --check-cfg cfg(zerocopy_generic_bounds_in_const_fn_1_61_0) --check-cfg cfg(zerocopy_panic_in_const_and_vec_try_reserve_1_57_0) --check-cfg cfg(zerocopy_target_has_atomics_1_60_0) --check-cfg cfg(doc_cfg) --check-cfg cfg(kani) --check-cfg cfg(__ZEROCOPY_INTERNAL_USE_ONLY_NIGHTLY_FEATURES_IN_TESTS) --check-cfg cfg(coverage_nightly)`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name winapi --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winapi-0.3.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"consoleapi\"" --cfg "feature=\"minwinbase\"" --cfg "feature=\"minwindef\"" --cfg "feature=\"processenv\"" --cfg "feature=\"winbase\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"accctrl\", \"aclapi\", \"activation\", \"adhoc\", \"appmgmt\", \"audioclient\", \"audiosessiontypes\", \"avrt\", \"basetsd\", \"bcrypt\", \"bits\", \"bits10_1\", \"bits1_5\", \"bits2_0\", \"bits2_5\", \"bits3_0\", \"bits4_0\", \"bits5_0\", \"bitscfg\", \"bitsmsg\", \"bluetoothapis\", \"bluetoothleapis\", \"bthdef\", \"bthioctl\", \"bthledef\", \"bthsdpdef\", \"bugcodes\", \"cderr\", \"cfg\", \"cfgmgr32\", \"cguid\", \"combaseapi\", \"coml2api\", \"commapi\", \"commctrl\", \"commdlg\", \"commoncontrols\", \"consoleapi\", \"corecrt\", \"corsym\", \"d2d1\", \"d2d1_1\", \"d2d1_2\", \"d2d1_3\", \"d2d1effectauthor\", \"d2d1effects\", \"d2d1effects_1\", \"d2d1effects_2\", \"d2d1svg\", \"d2dbasetypes\", \"d3d\", \"d3d10\", \"d3d10_1\", \"d3d10_1shader\", \"d3d10effect\", \"d3d10misc\", \"d3d10sdklayers\", \"d3d10shader\", \"d3d11\", \"d3d11_1\", \"d3d11_2\", \"d3d11_3\", \"d3d11_4\", \"d3d11on12\", \"d3d11sdklayers\", \"d3d11shader\", \"d3d11tokenizedprogramformat\", \"d3d12\", \"d3d12sdklayers\", \"d3d12shader\", \"d3d9\", \"d3d9caps\", \"d3d9types\", \"d3dcommon\", \"d3dcompiler\", \"d3dcsx\", \"d3dkmdt\", \"d3dkmthk\", \"d3dukmdt\", \"d3dx10core\", \"d3dx10math\", \"d3dx10mesh\", \"datetimeapi\", \"davclnt\", \"dbghelp\", \"dbt\", \"dcommon\", \"dcomp\", \"dcompanimation\", \"dcomptypes\", \"dde\", \"ddraw\", \"ddrawi\", \"ddrawint\", \"debug\", \"debugapi\", \"devguid\", \"devicetopology\", \"devpkey\", \"devpropdef\", \"dinput\", \"dinputd\", \"dispex\", \"dmksctl\", \"dmusicc\", \"docobj\", \"documenttarget\", \"dot1x\", \"dpa_dsa\", \"dpapi\", \"dsgetdc\", \"dsound\", \"dsrole\", \"dvp\", \"dwmapi\", \"dwrite\", \"dwrite_1\", \"dwrite_2\", \"dwrite_3\", \"dxdiag\", \"dxfile\", \"dxgi\", \"dxgi1_2\", \"dxgi1_3\", \"dxgi1_4\", \"dxgi1_5\", \"dxgi1_6\", \"dxgidebug\", \"dxgiformat\", \"dxgitype\", \"dxva2api\", \"dxvahd\", \"eaptypes\", \"enclaveapi\", \"endpointvolume\", \"errhandlingapi\", \"everything\", \"evntcons\", \"evntprov\", \"evntrace\", \"excpt\", \"exdisp\", \"fibersapi\", \"fileapi\", \"functiondiscoverykeys_devpkey\", \"gl-gl\", \"guiddef\", \"handleapi\", \"heapapi\", \"hidclass\", \"hidpi\", \"hidsdi\", \"hidusage\", \"highlevelmonitorconfigurationapi\", \"hstring\", \"http\", \"ifdef\", \"ifmib\", \"imm\", \"impl-debug\", \"impl-default\", \"in6addr\", \"inaddr\", \"inspectable\", \"interlockedapi\", \"intsafe\", \"ioapiset\", \"ipexport\", \"iphlpapi\", \"ipifcons\", \"ipmib\", \"iprtrmib\", \"iptypes\", \"jobapi\", \"jobapi2\", \"knownfolders\", \"ks\", \"ksmedia\", \"ktmtypes\", \"ktmw32\", \"l2cmn\", \"libloaderapi\", \"limits\", \"lmaccess\", \"lmalert\", \"lmapibuf\", \"lmat\", \"lmcons\", \"lmdfs\", \"lmerrlog\", \"lmjoin\", \"lmmsg\", \"lmremutl\", \"lmrepl\", \"lmserver\", \"lmshare\", \"lmstats\", \"lmsvc\", \"lmuse\", \"lmwksta\", \"lowlevelmonitorconfigurationapi\", \"lsalookup\", \"memoryapi\", \"minschannel\", \"minwinbase\", \"minwindef\", \"mmdeviceapi\", \"mmeapi\", \"mmreg\", \"mmsystem\", \"mprapidef\", \"msaatext\", \"mscat\", \"mschapp\", \"mssip\", \"mstcpip\", \"mswsock\", \"mswsockdef\", \"namedpipeapi\", \"namespaceapi\", \"nb30\", \"ncrypt\", \"netioapi\", \"nldef\", \"ntddndis\", \"ntddscsi\", \"ntddser\", \"ntdef\", \"ntlsa\", \"ntsecapi\", \"ntstatus\", \"oaidl\", \"objbase\", \"objidl\", \"objidlbase\", \"ocidl\", \"ole2\", \"oleauto\", \"olectl\", \"oleidl\", \"opmapi\", \"pdh\", \"perflib\", \"physicalmonitorenumerationapi\", \"playsoundapi\", \"portabledevice\", \"portabledeviceapi\", \"portabledevicetypes\", \"powerbase\", \"powersetting\", \"powrprof\", \"processenv\", \"processsnapshot\", \"processthreadsapi\", \"processtopologyapi\", \"profileapi\", \"propidl\", \"propkey\", \"propkeydef\", \"propsys\", \"prsht\", \"psapi\", \"qos\", \"realtimeapiset\", \"reason\", \"restartmanager\", \"restrictederrorinfo\", \"rmxfguid\", \"roapi\", \"robuffer\", \"roerrorapi\", \"rpc\", \"rpcdce\", \"rpcndr\", \"rtinfo\", \"sapi\", \"sapi51\", \"sapi53\", \"sapiddk\", \"sapiddk51\", \"schannel\", \"sddl\", \"securityappcontainer\", \"securitybaseapi\", \"servprov\", \"setupapi\", \"shellapi\", \"shellscalingapi\", \"shlobj\", \"shobjidl\", \"shobjidl_core\", \"shtypes\", \"softpub\", \"spapidef\", \"spellcheck\", \"sporder\", \"sql\", \"sqlext\", \"sqltypes\", \"sqlucode\", \"sspi\", \"std\", \"stralign\", \"stringapiset\", \"strmif\", \"subauth\", \"synchapi\", \"sysinfoapi\", \"systemtopologyapi\", \"taskschd\", \"tcpestats\", \"tcpmib\", \"textstor\", \"threadpoolapiset\", \"threadpoollegacyapiset\", \"timeapi\", \"timezoneapi\", \"tlhelp32\", \"transportsettingcommon\", \"tvout\", \"udpmib\", \"unknwnbase\", \"urlhist\", \"urlmon\", \"usb\", \"usbioctl\", \"usbiodef\", \"usbscan\", \"usbspec\", \"userenv\", \"usp10\", \"utilapiset\", \"uxtheme\", \"vadefs\", \"vcruntime\", \"vsbackup\", \"vss\", \"vsserror\", \"vswriter\", \"wbemads\", \"wbemcli\", \"wbemdisp\", \"wbemprov\", \"wbemtran\", \"wct\", \"werapi\", \"winbase\", \"wincodec\", \"wincodecsdk\", \"wincon\", \"wincontypes\", \"wincred\", \"wincrypt\", \"windef\", \"windot11\", \"windowsceip\", \"windowsx\", \"winefs\", \"winerror\", \"winevt\", \"wingdi\", \"winhttp\", \"wininet\", \"winineti\", \"winioctl\", \"winnetwk\", \"winnls\", \"winnt\", \"winreg\", \"winsafer\", \"winscard\", \"winsmcrd\", \"winsock2\", \"winspool\", \"winstring\", \"winsvc\", \"wintrust\", \"winusb\", \"winusbio\", \"winuser\", \"winver\", \"wlanapi\", \"wlanihv\", \"wlanihvtypes\", \"wlantypes\", \"wlclient\", \"wmistr\", \"wnnc\", \"wow64apiset\", \"wpdmtpextensions\", \"ws2bth\", \"ws2def\", \"ws2ipdef\", \"ws2spi\", \"ws2tcpip\", \"wtsapi32\", \"wtypes\", \"wtypesbase\", \"xinput\"))" -C metadata=b3b9712e99683173 -C extra-filename=-06b9a8e7692d3a2a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native -l dylib=advapi32 -l dylib=cfgmgr32 -l dylib=gdi32 -l dylib=kernel32 -l dylib=msimg32 -l dylib=opengl32 -l dylib=user32 -l dylib=winspool --cfg "feature=\"cfgmgr32\"" --cfg "feature=\"excpt\"" --cfg "feature=\"ktmtypes\"" --cfg "feature=\"winreg\"" --cfg "feature=\"ntdef\"" --cfg "feature=\"wincon\"" --cfg "feature=\"libloaderapi\"" --cfg "feature=\"windef\"" --cfg "feature=\"guiddef\"" --cfg "feature=\"wincontypes\"" --cfg "feature=\"ntstatus\"" --cfg "feature=\"cfg\"" --cfg "feature=\"reason\"" --cfg "feature=\"wingdi\"" --cfg "feature=\"winnt\"" --cfg "feature=\"fileapi\"" --cfg "feature=\"basetsd\"" --cfg "feature=\"processthreadsapi\"" --cfg "feature=\"vadefs\"" --cfg "feature=\"devpropdef\"" --cfg "feature=\"vcruntime\""`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name wasm_bindgen_shared --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-shared-0.2.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=47479ca1e1412e11 -C extra-filename=-98531fe4c3320cec --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern unicode_ident=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libunicode_ident-d186a595d5eaaaea.rmeta --cap-lints allow -C target-cpu=native`
   Compiling ahash v0.7.8
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\ahash-0.7.8\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"atomic-polyfill\", \"compile-time-rng\", \"const-random\", \"default\", \"serde\", \"std\"))" -C metadata=c94f47f7d922470d -C extra-filename=-855d658e53cb2f81 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\ahash-855d658e53cb2f81 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern version_check=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libversion_check-b615fbadb7e30480.rlib --cap-lints allow -C target-cpu=native`
    Checking winapi-util v0.1.9
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name winapi_util --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winapi-util-0.1.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=6fbbfa25774f1421 -C extra-filename=-441ad2d52abdd60c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern windows_sys=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwindows_sys-98691cf4a5d69ad0.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking once_cell v1.21.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name once_cell --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\once_cell-1.21.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"race\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"atomic-polyfill\", \"critical-section\", \"default\", \"parking_lot\", \"portable-atomic\", \"race\", \"std\", \"unstable\"))" -C metadata=b38694975763d52c -C extra-filename=-1571a4754c20c55a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name opaque_debug --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\opaque-debug-0.3.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=6f49777b0e3041e9 -C extra-filename=-2d2675cff173d2d7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking regex-automata v0.4.9
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex_automata --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-automata-0.4.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"dfa-onepass\"" --cfg "feature=\"hybrid\"" --cfg "feature=\"meta\"" --cfg "feature=\"nfa-backtrack\"" --cfg "feature=\"nfa-pikevm\"" --cfg "feature=\"nfa-thompson\"" --cfg "feature=\"perf-inline\"" --cfg "feature=\"perf-literal\"" --cfg "feature=\"perf-literal-multisubstring\"" --cfg "feature=\"perf-literal-substring\"" --cfg "feature=\"std\"" --cfg "feature=\"syntax\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"dfa\", \"dfa-build\", \"dfa-onepass\", \"dfa-search\", \"hybrid\", \"internal-instrument\", \"internal-instrument-pikevm\", \"logging\", \"meta\", \"nfa\", \"nfa-backtrack\", \"nfa-pikevm\", \"nfa-thompson\", \"perf\", \"perf-inline\", \"perf-literal\", \"perf-literal-multisubstring\", \"perf-literal-substring\", \"std\", \"syntax\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\", \"unicode-word-boundary\"))" -C metadata=21a1de687fcbd716 -C extra-filename=-76b036ae0bb4140a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern aho_corasick=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libaho_corasick-4834d0c2cc2aecc0.rmeta --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-2db820fb1ffcf981.rmeta --extern regex_syntax=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_syntax-85078768127e6b69.rmeta --cap-lints allow -C target-cpu=native`
   Compiling bumpalo v3.17.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bumpalo --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bumpalo-3.17.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"allocator-api2\", \"allocator_api\", \"boxed\", \"collections\", \"default\", \"serde\", \"std\"))" -C metadata=bd70eb609091b297 -C extra-filename=-32d6e032e9212254 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling feature-probe v0.1.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name feature_probe --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\feature-probe-0.1.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=ba2fc8ee16b96a0d -C extra-filename=-e8e57f51d893fdb0 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling shlex v1.3.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name shlex --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\shlex-1.3.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"std\"))" -C metadata=db5ebdf4112c2ebd -C extra-filename=-1961e33a46ef3be6 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name proc_macro2_diagnostics --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro2-diagnostics-0.9.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"colors\"" --cfg "feature=\"default\"" --cfg "feature=\"yansi\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"colors\", \"default\", \"yansi\"))" -C metadata=9506c40da046bf59 -C extra-filename=-07d87b78b23b16cb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rmeta --extern yansi=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libyansi-e44a0a8aa0eb0562.rmeta --cap-lints allow -C target-cpu=native`
   Compiling log v0.4.27
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name log --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\log-0.4.27\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"kv\", \"kv_serde\", \"kv_std\", \"kv_sval\", \"kv_unstable\", \"kv_unstable_serde\", \"kv_unstable_std\", \"kv_unstable_sval\", \"max_level_debug\", \"max_level_error\", \"max_level_info\", \"max_level_off\", \"max_level_trace\", \"max_level_warn\", \"release_max_level_debug\", \"release_max_level_error\", \"release_max_level_info\", \"release_max_level_off\", \"release_max_level_trace\", \"release_max_level_warn\", \"serde\", \"std\", \"sval\", \"sval_ref\", \"value-bag\"))" -C metadata=25f7805dfcc0676a -C extra-filename=-d6472377ecff088e --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling bv v0.11.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bv-0.11.1\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"serde\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"serde\"))" -C metadata=215d0c6a0085a076 -C extra-filename=-c21ceda2f629297c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\bv-c21ceda2f629297c -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern feature_probe=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libfeature_probe-e8e57f51d893fdb0.rlib --cap-lints allow -C target-cpu=native`
   Compiling wasm-bindgen-backend v0.2.100
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name wasm_bindgen_backend --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-backend-0.2.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"extra-traits\"))" -C metadata=789810380dc6f262 -C extra-filename=-6c6004d89ccd1cc7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern bumpalo=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbumpalo-32d6e032e9212254.rmeta --extern log=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblog-d6472377ecff088e.rmeta --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-34720c7bebe5cd54.rmeta --extern wasm_bindgen_shared=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwasm_bindgen_shared-98531fe4c3320cec.rmeta --cap-lints allow -C target-cpu=native`
   Compiling cc v1.2.17
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name cc --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cc-1.2.17\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"jobserver\", \"parallel\"))" -C metadata=a8ca91bbb43cdf35 -C extra-filename=-7090d604ce471cb4 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern shlex=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libshlex-1961e33a46ef3be6.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\ahash-855d658e53cb2f81\build-script-build`
    Checking termcolor v1.4.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name termcolor --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\termcolor-1.4.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=f0ffba871597ee01 -C extra-filename=-aa74595ee05ea04a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern winapi_util=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwinapi_util-441ad2d52abdd60c.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking ppv-lite86 v0.2.21
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name ppv_lite86 --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\ppv-lite86-0.2.21\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"simd\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"no_simd\", \"simd\", \"std\"))" -C metadata=fefa6779c6f681c0 -C extra-filename=-ef10aca84e87c2df --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern zerocopy=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzerocopy-ab67f1fc1b2cfbc8.rmeta --cap-lints allow -C target-cpu=native`
    Checking atty v0.2.14
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name atty --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\atty-0.2.14\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=0fa0f3cd0a23432e -C extra-filename=-8bf42f91bf297b2f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern winapi=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwinapi-06b9a8e7692d3a2a.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name rustversion --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rustversion-1.0.20\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=d9b2d5db652da71f -C extra-filename=-d8c4e5ed4ac2a2eb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro --cap-lints allow -C target-cpu=native --cfg "host_os=\"windows\"" --check-cfg cfg(cfg_macro_not_allowed) --check-cfg "cfg(host_os, values(\"windows\"))"`
   Compiling libsecp256k1-gen-ecmult v0.2.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name libsecp256k1_gen_ecmult --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-gen-ecmult-0.2.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=1591476039a60a20 -C extra-filename=-7aef77ce34ab83db --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern libsecp256k1_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1_core-e3473678399f948b.rmeta --cap-lints allow -C target-cpu=native`
   Compiling libsecp256k1-gen-genmult v0.2.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name libsecp256k1_gen_genmult --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-gen-genmult-0.2.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=018c05e67aea7803 -C extra-filename=-8037241cdae625d5 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern libsecp256k1_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1_core-e3473678399f948b.rmeta --cap-lints allow -C target-cpu=native`
   Compiling solana-frozen-abi-macro v1.9.29
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-frozen-abi-macro-1.9.29\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=131d337a62c46275 -C extra-filename=-73c4b1ff4a51c59f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-frozen-abi-macro-73c4b1ff4a51c59f -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern rustc_version=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librustc_version-16e470730bd7bb08.rlib --cap-lints allow -C target-cpu=native`
    Checking getrandom v0.2.15
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name getrandom --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\getrandom-0.2.15\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"compiler_builtins\", \"core\", \"custom\", \"js\", \"js-sys\", \"linux_disable_fallback\", \"rdrand\", \"rustc-dep-of-std\", \"std\", \"test-in-browser\", \"wasm-bindgen\"))" -C metadata=6562f3c2f1d16be9 -C extra-filename=-cf52d5b49b802910 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-0bbb4ae55c831e4c.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name log --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\log-0.4.27\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"kv\", \"kv_serde\", \"kv_std\", \"kv_sval\", \"kv_unstable\", \"kv_unstable_serde\", \"kv_unstable_std\", \"kv_unstable_sval\", \"max_level_debug\", \"max_level_error\", \"max_level_info\", \"max_level_off\", \"max_level_trace\", \"max_level_warn\", \"release_max_level_debug\", \"release_max_level_error\", \"release_max_level_info\", \"release_max_level_off\", \"release_max_level_trace\", \"release_max_level_warn\", \"serde\", \"std\", \"sval\", \"sval_ref\", \"value-bag\"))" -C metadata=c13dc72f22c459c5 -C extra-filename=-53d7cc73b8cbd92b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name cpufeatures --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\cpufeatures-0.2.17\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=aa2af59ee5d9cb8c -C extra-filename=-6f62c42c4576eeac --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling equivalent v1.0.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name equivalent --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\equivalent-1.0.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=85a3d50a57fdf3df -C extra-filename=-8b20c065d80ea962 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling autocfg v1.4.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name autocfg --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\autocfg-1.4.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=8f7b206d6b97f01f -C extra-filename=-838fb96afb6f547d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling hashbrown v0.15.2
    Checking humantime v2.2.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name hashbrown --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\hashbrown-0.15.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"allocator-api2\", \"compiler_builtins\", \"core\", \"default\", \"default-hasher\", \"equivalent\", \"inline-more\", \"nightly\", \"raw-entry\", \"rayon\", \"rustc-dep-of-std\", \"rustc-internal-api\", \"serde\"))" -C metadata=dcad4a31c2ab07c5 -C extra-filename=-320df2277d9fcd2d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name humantime --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\humantime-2.2.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=c4887c72df0a5c9e -C extra-filename=-9bcbdef0d9372b6e --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling serde_derive v1.0.219
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name serde_derive --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_derive-1.0.219\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"deserialize_in_place\"))" -C metadata=4af75327b20f842c -C extra-filename=-f952144cd27e3d64 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-34720c7bebe5cd54.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-frozen-abi-macro-73c4b1ff4a51c59f\build-script-build`
   Compiling wasm-bindgen-macro-support v0.2.100
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name wasm_bindgen_macro_support --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-macro-support-0.2.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"extra-traits\", \"strict-macro\"))" -C metadata=a8da6c6b1c627913 -C extra-filename=-06440cf04c18b9c7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-34720c7bebe5cd54.rmeta --extern wasm_bindgen_backend=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwasm_bindgen_backend-6c6004d89ccd1cc7.rmeta --extern wasm_bindgen_shared=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwasm_bindgen_shared-98531fe4c3320cec.rmeta --cap-lints allow -C target-cpu=native`
    Checking regex v1.11.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-1.11.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"perf\"" --cfg "feature=\"perf-backtrack\"" --cfg "feature=\"perf-cache\"" --cfg "feature=\"perf-dfa\"" --cfg "feature=\"perf-inline\"" --cfg "feature=\"perf-literal\"" --cfg "feature=\"perf-onepass\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"logging\", \"pattern\", \"perf\", \"perf-backtrack\", \"perf-cache\", \"perf-dfa\", \"perf-dfa-full\", \"perf-inline\", \"perf-literal\", \"perf-onepass\", \"std\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\", \"unstable\", \"use_std\"))" -C metadata=2937f91415dadeaf -C extra-filename=-a8387e9f9e1d4fbb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern aho_corasick=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libaho_corasick-4834d0c2cc2aecc0.rmeta --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-2db820fb1ffcf981.rmeta --extern regex_automata=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_automata-76b036ae0bb4140a.rmeta --extern regex_syntax=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_syntax-85078768127e6b69.rmeta --cap-lints allow -C target-cpu=native`
   Compiling num-traits v0.2.19
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\num-traits-0.2.19\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"i128\", \"libm\", \"std\"))" -C metadata=4b3cd205814936e1 -C extra-filename=-cced91082c41b9f1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\num-traits-cced91082c41b9f1 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern autocfg=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libautocfg-838fb96afb6f547d.rlib --cap-lints allow -C target-cpu=native`
    Checking env_logger v0.9.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name env_logger --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\env_logger-0.9.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"atty\"" --cfg "feature=\"default\"" --cfg "feature=\"humantime\"" --cfg "feature=\"regex\"" --cfg "feature=\"termcolor\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"atty\", \"default\", \"humantime\", \"regex\", \"termcolor\"))" -C metadata=221a8d7eaadd1f69 -C extra-filename=-e57aca01a2c1cf95 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern atty=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libatty-8bf42f91bf297b2f.rmeta --extern humantime=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libhumantime-9bcbdef0d9372b6e.rmeta --extern log=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblog-53d7cc73b8cbd92b.rmeta --extern regex=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex-a8387e9f9e1d4fbb.rmeta --extern termcolor=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtermcolor-aa74595ee05ea04a.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
   Compiling indexmap v2.8.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name indexmap --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\indexmap-2.8.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --allow=clippy::style --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"arbitrary\", \"borsh\", \"default\", \"quickcheck\", \"rayon\", \"serde\", \"std\", \"test_debug\"))" -C metadata=1203d9492713ab0a -C extra-filename=-93799599db7c5cf1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern equivalent=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libequivalent-8b20c065d80ea962.rmeta --extern hashbrown=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libhashbrown-320df2277d9fcd2d.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name ahash --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\ahash-0.7.8\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"atomic-polyfill\", \"compile-time-rng\", \"const-random\", \"default\", \"serde\", \"std\"))" -C metadata=2848223b08753f99 -C extra-filename=-be4818af7060bcbb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern getrandom=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgetrandom-cf52d5b49b802910.rmeta --extern once_cell=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libonce_cell-1571a4754c20c55a.rmeta --cap-lints allow -C target-cpu=native --cfg "feature=\"runtime-rng\"" --cfg "feature=\"folded_multiply\""`
   Compiling libsecp256k1 v0.6.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-0.6.0\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"hmac\"" --cfg "feature=\"hmac-drbg\"" --cfg "feature=\"sha2\"" --cfg "feature=\"static-context\"" --cfg "feature=\"std\"" --cfg "feature=\"typenum\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"hmac\", \"hmac-drbg\", \"lazy-static-context\", \"lazy_static\", \"sha2\", \"static-context\", \"std\", \"typenum\"))" -C metadata=b108e32b53ad756b -C extra-filename=-e53dd7b1d9f61136 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\libsecp256k1-e53dd7b1d9f61136 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern libsecp256k1_gen_ecmult=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1_gen_ecmult-7aef77ce34ab83db.rlib --extern libsecp256k1_gen_genmult=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1_gen_genmult-8037241cdae625d5.rlib --cap-lints allow -C target-cpu=native`
    Checking rand_chacha v0.2.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name rand_chacha --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rand_chacha-0.2.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"simd\", \"std\"))" -C metadata=78add2c77ff97a64 -C extra-filename=-52bdf7db5acc8aac --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern ppv_lite86=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libppv_lite86-ef10aca84e87c2df.rmeta --extern rand_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand_core-d698ff5f7d71230c.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\bv-c21ceda2f629297c\build-script-build`
   Compiling borsh-schema-derive-internal v0.9.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name borsh_schema_derive_internal --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\borsh-schema-derive-internal-0.9.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=06dca2be3a16ff4c -C extra-filename=-3099015dd0088f5a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rmeta --cap-lints allow -C target-cpu=native`
   Compiling borsh-derive-internal v0.9.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name borsh_derive_internal --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\borsh-derive-internal-0.9.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=29acb1adad5350de -C extra-filename=-abea1a98efe1648d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rmeta --cap-lints allow -C target-cpu=native`
   Compiling solana-frozen-abi v1.9.29
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-frozen-abi-1.9.29\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=09d1f01278731f6b -C extra-filename=-6f48859adcecfc51 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-frozen-abi-6f48859adcecfc51 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern rustc_version=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librustc_version-16e470730bd7bb08.rlib --cap-lints allow -C target-cpu=native`
   Compiling thiserror-impl v1.0.38
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name thiserror_impl --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\thiserror-impl-1.0.38\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=a2acbf58e1d1b9d9 -C extra-filename=-0d2bcc17f26e17a2 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name crunchy --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\crunchy-0.2.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"limit_128\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"limit_1024\", \"limit_128\", \"limit_2048\", \"limit_256\", \"limit_512\", \"limit_64\", \"std\"))" -C metadata=d7a2388a727cd3d4 -C extra-filename=-005195b2187c8fd6 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling toml_datetime v0.6.8
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name toml_datetime --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\toml_datetime-0.6.8\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --warn=rust_2018_idioms --warn=clippy::zero_sized_map_values --warn=clippy::wildcard_imports --warn=clippy::verbose_file_reads --warn=unused_qualifications --warn=unused_macro_rules --warn=unused_lifetimes --warn=unsafe_op_in_unsafe_fn --warn=unreachable_pub --warn=clippy::trait_duplication_in_bounds --warn=clippy::todo --warn=clippy::string_to_string --warn=clippy::string_lit_as_bytes --warn=clippy::string_add_assign --warn=clippy::string_add --warn=clippy::str_to_string --warn=clippy::semicolon_if_nothing_returned --warn=clippy::self_named_module_files --warn=clippy::same_functions_in_if_condition --warn=clippy::rest_pat_in_fully_bound_structs --warn=clippy::ref_option_ref --warn=clippy::redundant_feature_names --warn=clippy::rc_mutex --warn=clippy::ptr_as_ptr --warn=clippy::path_buf_push_overwrite --warn=clippy::negative_feature_names --warn=clippy::needless_for_each --warn=clippy::needless_continue --warn=clippy::mutex_integer --warn=clippy::mem_forget --warn=clippy::macro_use_imports --warn=clippy::lossy_float_literal --warn=clippy::linkedlist --allow=clippy::let_and_return --warn=clippy::large_types_passed_by_value --warn=clippy::large_stack_arrays --warn=clippy::large_digit_groups --warn=clippy::invalid_upcast_comparisons --warn=clippy::infinite_loop --warn=clippy::inefficient_to_string --warn=clippy::inconsistent_struct_constructor --warn=clippy::imprecise_flops --warn=clippy::implicit_clone --allow=clippy::if_same_then_else --warn=clippy::from_iter_instead_of_collect --warn=clippy::fn_params_excessive_bools --warn=clippy::float_cmp_const --warn=clippy::flat_map_option --warn=clippy::filter_map_next --warn=clippy::fallible_impl_from --warn=clippy::explicit_into_iter_loop --warn=clippy::explicit_deref_methods --warn=clippy::expl_impl_clone_on_copy --warn=clippy::enum_glob_use --warn=clippy::empty_enum --warn=clippy::doc_markdown --warn=clippy::debug_assert_with_mut_call --warn=clippy::dbg_macro --warn=clippy::create_dir --allow=clippy::collapsible_else_if --warn=clippy::checked_conversions --allow=clippy::branches_sharing_code --allow=clippy::bool_assert_comparison --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"serde\"))" -C metadata=57dce2dbc60ab43f -C extra-filename=-df03de96ae8bbedd --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking arrayref v0.3.9
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name arrayref --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\arrayref-0.3.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=a632b363a0b6ae35 -C extra-filename=-448db2eb1c2314ce --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking lazy_static v1.5.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name lazy_static --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\lazy_static-1.5.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"spin\", \"spin_no_std\"))" -C metadata=41e16afc300db62b -C extra-filename=-442eb4db3c183de4 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling bs58 v0.4.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bs58 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bs58-0.4.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"check\", \"default\", \"sha2\", \"std\"))" -C metadata=4ed1667750f7d1af -C extra-filename=-c049b8665a31f53e --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling wasm-bindgen v0.2.100
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-0.2.100\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --warn=unexpected_cfgs --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(wasm_bindgen_unstable_test_coverage) --cfg "feature=\"default\"" --cfg "feature=\"msrv\"" --cfg "feature=\"rustversion\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"enable-interning\", \"gg-alloc\", \"msrv\", \"rustversion\", \"serde\", \"serde-serialize\", \"serde_json\", \"spans\", \"std\", \"strict-macro\", \"xxx_debug_only_print_generated_code\"))" -C metadata=4378373974f8728e -C extra-filename=-5758a29745684ec8 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\wasm-bindgen-5758a29745684ec8 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling blake3 v1.7.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\blake3-1.7.0\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --cfg "feature=\"traits-preview\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"digest\", \"mmap\", \"neon\", \"no_avx2\", \"no_avx512\", \"no_neon\", \"no_sse2\", \"no_sse41\", \"prefer_intrinsics\", \"pure\", \"rayon\", \"serde\", \"std\", \"traits-preview\", \"wasm32_simd\", \"zeroize\"))" -C metadata=ebe90de8b9b0f9a6 -C extra-filename=-4cf488cdf0782513 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-4cf488cdf0782513 -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern cc=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcc-7090d604ce471cb4.rlib --cap-lints allow -C target-cpu=native`
   Compiling winnow v0.5.40
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name winnow --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\winnow-0.5.40\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"debug\", \"default\", \"simd\", \"std\", \"unstable-doc\", \"unstable-recover\"))" -C metadata=f248bf4622395011 -C extra-filename=-3af55f17a04be258 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking solana-logger v1.9.29
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name solana_logger --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-logger-1.9.29\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=c749e2b3161b90dd -C extra-filename=-ad0acdb44aa0627f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern env_logger=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libenv_logger-e57aca01a2c1cf95.rmeta --extern lazy_static=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblazy_static-442eb4db3c183de4.rmeta --extern log=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblog-53d7cc73b8cbd92b.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-frozen-abi-6f48859adcecfc51\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name solana_frozen_abi_macro --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-frozen-abi-macro-1.9.29\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=7e6b074d0559d5dd -C extra-filename=-fd04920282261290 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native --cfg RUSTC_WITHOUT_SPECIALIZATION`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\wasm-bindgen-5758a29745684ec8\build-script-build`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\libsecp256k1-e53dd7b1d9f61136\build-script-build`
    Checking rand v0.7.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name rand --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\rand-0.7.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"getrandom\"" --cfg "feature=\"getrandom_package\"" --cfg "feature=\"libc\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"getrandom\", \"getrandom_package\", \"libc\", \"log\", \"nightly\", \"packed_simd\", \"rand_pcg\", \"serde1\", \"simd_support\", \"small_rng\", \"std\", \"stdweb\", \"wasm-bindgen\"))" -C metadata=bd5119b9872ebf9d -C extra-filename=-95f039009198f95c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern getrandom_package=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgetrandom-97573c5bec270336.rmeta --extern rand_chacha=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand_chacha-52bdf7db5acc8aac.rmeta --extern rand_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand_core-d698ff5f7d71230c.rmeta --cap-lints allow -C target-cpu=native`
   Compiling wasm-bindgen-macro v0.2.100
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-4cf488cdf0782513\build-script-build`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name wasm_bindgen_macro --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-macro-0.2.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"strict-macro\", \"xxx_debug_only_print_generated_code\"))" -C metadata=8a5ece16162c212e -C extra-filename=-51fd76ce04186563 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern wasm_bindgen_macro_support=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwasm_bindgen_macro_support-06440cf04c18b9c7.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
    Checking hashbrown v0.11.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name hashbrown --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\hashbrown-0.11.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"ahash\"" --cfg "feature=\"default\"" --cfg "feature=\"inline-more\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"ahash\", \"ahash-compile-time-rng\", \"alloc\", \"bumpalo\", \"compiler_builtins\", \"core\", \"default\", \"inline-more\", \"nightly\", \"raw\", \"rayon\", \"rustc-dep-of-std\", \"rustc-internal-api\", \"serde\"))" -C metadata=645728a59427298e -C extra-filename=-1242a4c65de5a5e9 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern ahash=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libahash-be4818af7060bcbb.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\num-traits-cced91082c41b9f1\build-script-build`
   Compiling bytemuck_derive v1.9.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bytemuck_derive --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bytemuck_derive-1.9.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=671db7157efd1c40 -C extra-filename=-08fa062e45480b73 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-34720c7bebe5cd54.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
   Compiling solana-program v1.9.29
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name build_script_build --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=e6f7661f1ed3e4d7 -C extra-filename=-b0d4515c3b48135b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-program-b0d4515c3b48135b -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern rustc_version=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librustc_version-16e470730bd7bb08.rlib --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name thiserror --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\thiserror-1.0.38\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=e314de9aa0e807a4 -C extra-filename=-9d343cf97c880a4c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern thiserror_impl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\thiserror_impl-0d2bcc17f26e17a2.dll --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name thiserror --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\thiserror-1.0.38\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=5129f99896dd29ec -C extra-filename=-cd68f7eb58314aa1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern thiserror_impl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\thiserror_impl-0d2bcc17f26e17a2.dll --cap-lints allow -C target-cpu=native`
    Checking zeroize v1.5.7
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name zeroize --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\zeroize-1.5.7\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"aarch64\", \"alloc\", \"default\", \"derive\", \"serde\", \"std\", \"zeroize_derive\"))" -C metadata=4bf59964dd4211dc -C extra-filename=-ab67ac47317ba764 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking keccak v0.1.5
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name keccak --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\keccak-0.1.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"asm\", \"no_unroll\", \"simd\"))" -C metadata=62701cbe37e66548 -C extra-filename=-ef88f91e09eef8ff --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bs58 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bs58-0.4.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"check\", \"default\", \"sha2\", \"std\"))" -C metadata=3467d188894a57f5 -C extra-filename=-3d91bb0635b1008a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking arrayvec v0.7.6
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name arrayvec --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\arrayvec-0.7.6\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"borsh\", \"default\", \"serde\", \"std\", \"zeroize\"))" -C metadata=b7aafdeea8eaed36 -C extra-filename=-d8fb61ce9e9fb746 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking base64 v0.12.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name base64 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\base64-0.12.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"std\"))" -C metadata=890d21a37ea8bd7f -C extra-filename=-eb660678e7cf2175 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking either v1.15.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name either --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\either-1.15.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --cfg "feature=\"use_std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"serde\", \"std\", \"use_std\"))" -C metadata=8dd40740e7d0d0e2 -C extra-filename=-85e5bfbc10f813eb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking memmap2 v0.5.10
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name memmap2 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\memmap2-0.5.10\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"stable_deref_trait\"))" -C metadata=29fbf192eeb8537c -C extra-filename=-b31b9b7b1dcac6e7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking constant_time_eq v0.3.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name constant_time_eq --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\constant_time_eq-0.3.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"count_instructions_test\"))" -C metadata=c5baf02523d253d0 -C extra-filename=-31ac0225117e87cb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name once_cell --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\once_cell-1.21.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"race\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"atomic-polyfill\", \"critical-section\", \"default\", \"parking_lot\", \"portable-atomic\", \"race\", \"std\", \"unstable\"))" -C metadata=5256bcbd09ef36ea -C extra-filename=-322ecf3668de5da5 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking byteorder v1.5.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name byteorder --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\byteorder-1.5.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"i128\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"i128\", \"std\"))" -C metadata=ae7f850feab4b348 -C extra-filename=-8eaf5ae74c5d522f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name num_traits --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\num-traits-0.2.19\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"i128\", \"libm\", \"std\"))" -C metadata=520d39f459115bbe -C extra-filename=-6b9d5647ebd588b8 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native --cfg has_total_cmp --check-cfg cfg(has_total_cmp)`
     Running `C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\solana-program-b0d4515c3b48135b\build-script-build`
    Checking itertools v0.10.5
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name itertools --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\itertools-0.10.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"use_alloc\"" --cfg "feature=\"use_std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"use_alloc\", \"use_std\"))" -C metadata=e2d3a9b4948f53a1 -C extra-filename=-dbd17f031e12f3f0 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern either=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libeither-85e5bfbc10f813eb.rmeta --cap-lints allow -C target-cpu=native`
   Compiling toml_edit v0.19.15
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name toml_edit --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\toml_edit-0.19.15\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"perf\", \"serde\", \"unbounded\"))" -C metadata=9479f5eef4784623 -C extra-filename=-5b4b54d18a5e97f7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern indexmap=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libindexmap-93799599db7c5cf1.rmeta --extern toml_datetime=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtoml_datetime-df03de96ae8bbedd.rmeta --extern winnow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwinnow-3af55f17a04be258.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name wasm_bindgen --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\wasm-bindgen-0.2.100\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --allow=clippy::type_complexity --allow=clippy::too_many_arguments --allow=clippy::overly_complex_bool_expr --allow=clippy::new_without_default --allow=clippy::large_enum_variant --check-cfg cfg(wasm_bindgen_unstable_test_coverage) --cfg "feature=\"default\"" --cfg "feature=\"msrv\"" --cfg "feature=\"rustversion\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"enable-interning\", \"gg-alloc\", \"msrv\", \"rustversion\", \"serde\", \"serde-serialize\", \"serde_json\", \"spans\", \"std\", \"strict-macro\", \"xxx_debug_only_print_generated_code\"))" -C metadata=f412bbde071f7a9a -C extra-filename=-68c6c6d8ead29da7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-0bbb4ae55c831e4c.rmeta --extern once_cell=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libonce_cell-1571a4754c20c55a.rmeta --extern rustversion=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\rustversion-d8c4e5ed4ac2a2eb.dll --extern wasm_bindgen_macro=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\wasm_bindgen_macro-51fd76ce04186563.dll --cap-lints allow -C target-cpu=native`
   Compiling solana-sdk-macro v1.9.29
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name solana_sdk_macro --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-sdk-macro-1.9.29\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=d975dc0749b65971 -C extra-filename=-4ed82ba46506b111 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern bs58=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbs58-c049b8665a31f53e.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern rustversion=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\rustversion-d8c4e5ed4ac2a2eb.dll --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
   Compiling num-derive v0.3.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name num_derive --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\num-derive-0.3.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"full-syntax\"))" -C metadata=242e600c5e1c3845 -C extra-filename=-32c076bfba803db1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name serde --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"serde_derive\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"derive\", \"rc\", \"serde_derive\", \"std\", \"unstable\"))" -C metadata=3edee021ffb32100 -C extra-filename=-b3cf61fd9029a210 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\serde_derive-f952144cd27e3d64.dll --cap-lints allow -C target-cpu=native --check-cfg cfg(no_core_cstr) --check-cfg cfg(no_core_error) --check-cfg cfg(no_core_net) --check-cfg cfg(no_core_num_saturating) --check-cfg cfg(no_core_try_from) --check-cfg cfg(no_diagnostic_namespace) --check-cfg cfg(no_float_copysign) --check-cfg cfg(no_num_nonzero_signed) --check-cfg cfg(no_relaxed_trait_bounds) --check-cfg cfg(no_serde_derive) --check-cfg cfg(no_std_atomic) --check-cfg cfg(no_std_atomic64) --check-cfg cfg(no_systemtime_checked_add) --check-cfg cfg(no_target_has_atomic)`
    Checking bytemuck v1.22.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name serde --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde-1.0.219\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --cfg "feature=\"serde_derive\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"derive\", \"rc\", \"serde_derive\", \"std\", \"unstable\"))" -C metadata=b6bba69afe89334d -C extra-filename=-aad22bb475d6f185 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\serde_derive-f952144cd27e3d64.dll --cap-lints allow -C target-cpu=native --check-cfg cfg(no_core_cstr) --check-cfg cfg(no_core_error) --check-cfg cfg(no_core_net) --check-cfg cfg(no_core_num_saturating) --check-cfg cfg(no_core_try_from) --check-cfg cfg(no_diagnostic_namespace) --check-cfg cfg(no_float_copysign) --check-cfg cfg(no_num_nonzero_signed) --check-cfg cfg(no_relaxed_trait_bounds) --check-cfg cfg(no_serde_derive) --check-cfg cfg(no_std_atomic) --check-cfg cfg(no_std_atomic64) --check-cfg cfg(no_systemtime_checked_add) --check-cfg cfg(no_target_has_atomic)`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bytemuck --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bytemuck-1.22.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --deny=unexpected_cfgs --check-cfg "cfg(target_arch, values(\"spirv\"))" --cfg "feature=\"bytemuck_derive\"" --cfg "feature=\"derive\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"aarch64_simd\", \"align_offset\", \"alloc_uninit\", \"avx512_simd\", \"bytemuck_derive\", \"const_zeroed\", \"derive\", \"extern_crate_alloc\", \"extern_crate_std\", \"latest_stable_rust\", \"min_const_generics\", \"must_cast\", \"must_cast_extra\", \"nightly_docs\", \"nightly_float\", \"nightly_portable_simd\", \"nightly_stdsimd\", \"pod_saturating\", \"track_caller\", \"transparentwrapper_extra\", \"unsound_ptr_pod_impl\", \"wasm_simd\", \"zeroable_atomics\", \"zeroable_maybe_uninit\"))" -C metadata=cd3ca945bd2a16ff -C extra-filename=-1e4e17d4ac088281 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern bytemuck_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\bytemuck_derive-08fa062e45480b73.dll --cap-lints allow -C target-cpu=native`
    Checking bitflags v1.3.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bitflags --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bitflags-1.3.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"compiler_builtins\", \"core\", \"default\", \"example_generated\", \"rustc-dep-of-std\"))" -C metadata=bd8947601d0d63fa -C extra-filename=-ae7a4e8c05939995 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
    Checking base64 v0.13.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name base64 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\base64-0.13.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"std\"))" -C metadata=7cb0afa3975106f3 -C extra-filename=-ae7fb19acb077eba --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name aho_corasick --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\aho-corasick-1.1.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"perf-literal\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"logging\", \"perf-literal\", \"std\"))" -C metadata=5576920af32c7958 -C extra-filename=-4c14c4d694543a78 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-5e3540f72e1169fa.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex_syntax --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-syntax-0.8.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --cfg "feature=\"unicode\"" --cfg "feature=\"unicode-age\"" --cfg "feature=\"unicode-bool\"" --cfg "feature=\"unicode-case\"" --cfg "feature=\"unicode-gencat\"" --cfg "feature=\"unicode-perl\"" --cfg "feature=\"unicode-script\"" --cfg "feature=\"unicode-segment\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"arbitrary\", \"default\", \"std\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\"))" -C metadata=51d9f65676fce848 -C extra-filename=-87d7eb20894f31d1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --cap-lints allow -C target-cpu=native`
   Compiling proc-macro-crate v1.3.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name proc_macro_crate --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro-crate-1.3.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=b3e59cd55c941ffe -C extra-filename=-a21dea70700334e6 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern once_cell=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libonce_cell-322ecf3668de5da5.rmeta --extern toml_edit=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtoml_edit-5b4b54d18a5e97f7.rmeta --cap-lints allow -C target-cpu=native`
   Compiling num_enum_derive v0.5.11
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name num_enum_derive --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\num_enum_derive-0.5.11\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --cfg "feature=\"proc-macro-crate\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"complex-expressions\", \"default\", \"external_doc\", \"proc-macro-crate\", \"std\"))" -C metadata=ada1f71ac58fb39b -C extra-filename=-73fff7140c45e5f5 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro_crate=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro_crate-a21dea70700334e6.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex_automata --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-automata-0.4.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"alloc\"" --cfg "feature=\"dfa-onepass\"" --cfg "feature=\"hybrid\"" --cfg "feature=\"meta\"" --cfg "feature=\"nfa-backtrack\"" --cfg "feature=\"nfa-pikevm\"" --cfg "feature=\"nfa-thompson\"" --cfg "feature=\"perf-inline\"" --cfg "feature=\"perf-literal\"" --cfg "feature=\"perf-literal-multisubstring\"" --cfg "feature=\"perf-literal-substring\"" --cfg "feature=\"std\"" --cfg "feature=\"syntax\"" --cfg "feature=\"unicode\"" --cfg "feature=\"unicode-age\"" --cfg "feature=\"unicode-bool\"" --cfg "feature=\"unicode-case\"" --cfg "feature=\"unicode-gencat\"" --cfg "feature=\"unicode-perl\"" --cfg "feature=\"unicode-script\"" --cfg "feature=\"unicode-segment\"" --cfg "feature=\"unicode-word-boundary\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"dfa\", \"dfa-build\", \"dfa-onepass\", \"dfa-search\", \"hybrid\", \"internal-instrument\", \"internal-instrument-pikevm\", \"logging\", \"meta\", \"nfa\", \"nfa-backtrack\", \"nfa-pikevm\", \"nfa-thompson\", \"perf\", \"perf-inline\", \"perf-literal\", \"perf-literal-multisubstring\", \"perf-literal-substring\", \"std\", \"syntax\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\", \"unicode-word-boundary\"))" -C metadata=53a394c79af0e44c -C extra-filename=-16f8b97249062c1a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern aho_corasick=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libaho_corasick-4c14c4d694543a78.rmeta --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-5e3540f72e1169fa.rmeta --extern regex_syntax=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_syntax-87d7eb20894f31d1.rmeta --cap-lints allow -C target-cpu=native`
    Checking serde_bytes v0.11.17
    Checking bincode v1.3.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bincode --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bincode-1.3.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"i128\"))" -C metadata=e00c65edea45ac39 -C extra-filename=-5886f9cfef6243ec --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name generic_array --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\generic-array-0.14.7\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"more_lengths\"" --cfg "feature=\"serde\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"more_lengths\", \"serde\", \"zeroize\"))" -C metadata=d7804e69955e97bc -C extra-filename=-bd647ac3550c42af --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --extern typenum=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtypenum-e357d787e741afdb.rmeta --cap-lints allow -C target-cpu=native --cfg relaxed_coherence`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name bv --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\bv-0.11.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"serde\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"serde\"))" -C metadata=65d10d9ddee52e92 -C extra-filename=-1dd8df4529895e0d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --cap-lints allow -C target-cpu=native --cfg int_128 --cfg inclusive_range`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name serde_bytes --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_bytes-0.11.17\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"default\", \"std\"))" -C metadata=388ceffe85b8693d -C extra-filename=-133020cb0bbf73bf --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --cap-lints allow -C target-cpu=native`
    Checking num_enum v0.5.11
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name num_enum --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\num_enum-0.5.11\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"complex-expressions\", \"default\", \"external_doc\", \"std\"))" -C metadata=b0b802881260fc40 -C extra-filename=-a89f9de6653379a1 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern num_enum_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\num_enum_derive-73fff7140c45e5f5.dll --cap-lints allow -C target-cpu=native`
   Compiling toml v0.5.11
   Compiling shank_macro_impl v0.0.12
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name toml --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\toml-0.5.11\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"indexmap\", \"preserve_order\"))" -C metadata=1aa22b1eada62212 -C extra-filename=-515308f5a8f31342 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-b3cf61fd9029a210.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name shank_macro_impl --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\shank_macro_impl-0.0.12\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=b5f3af1f890377b6 -C extra-filename=-77e63df4e3df5c07 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rmeta --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-b3cf61fd9029a210.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name serde_json --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\serde_json-1.0.140\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"arbitrary_precision\", \"default\", \"float_roundtrip\", \"indexmap\", \"preserve_order\", \"raw_value\", \"std\", \"unbounded_depth\"))" -C metadata=a6f5c95612f0b454 -C extra-filename=-469e367f9ff0ad3c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern itoa=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libitoa-2e47f628521f3c88.rmeta --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-5e3540f72e1169fa.rmeta --extern ryu=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libryu-77128e2f73f1f485.rmeta --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-b3cf61fd9029a210.rmeta --cap-lints allow -C target-cpu=native --cfg "fast_arithmetic=\"64\"" --check-cfg "cfg(fast_arithmetic, values(\"32\", \"64\"))"`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name digest --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\digest-0.9.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"blobby\", \"dev\", \"std\"))" -C metadata=43b99c7fd5f45d70 -C extra-filename=-6ca3504e575e51bd --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name block_buffer --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\block-buffer-0.9.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"block-padding\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"block-padding\"))" -C metadata=49346d53b3421962 -C extra-filename=-118052d1474852e0 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern block_padding=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblock_padding-7e3a3841fd5430cf.rmeta --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --cap-lints allow -C target-cpu=native`
    Checking crypto-mac v0.8.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name crypto_mac --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\crypto-mac-0.8.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"blobby\", \"dev\", \"std\"))" -C metadata=ed1342736278342d -C extra-filename=-f38b8183e7dcb591 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --extern subtle=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsubtle-f7eeb6269ad54a50.rmeta --cap-lints allow -C target-cpu=native`
    Checking crypto-common v0.1.6
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name crypto_common --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\crypto-common-0.1.6\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"getrandom\", \"rand_core\", \"std\"))" -C metadata=83a6a92a4d7e312d -C extra-filename=-8cf362b3d3f78b87 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --extern typenum=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtypenum-e357d787e741afdb.rmeta --cap-lints allow -C target-cpu=native`
    Checking block-buffer v0.10.4
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name block_buffer --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\block-buffer-0.10.4\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=acc13d85888d934b -C extra-filename=-af944a66b421ddbb --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --cap-lints allow -C target-cpu=native`
    Checking hmac v0.8.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name sha2 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\sha2-0.9.9\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"asm\", \"asm-aarch64\", \"compress\", \"default\", \"force-soft\", \"sha2-asm\", \"std\"))" -C metadata=1fc5d053cd61ad4f -C extra-filename=-658d5d900e8b065b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern block_buffer=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblock_buffer-118052d1474852e0.rmeta --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-0bbb4ae55c831e4c.rmeta --extern cpufeatures=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcpufeatures-6f62c42c4576eeac.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern opaque_debug=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libopaque_debug-2d2675cff173d2d7.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name hmac --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\hmac-0.8.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=f279be20dbeb44aa -C extra-filename=-d43a84c50e969888 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern crypto_mac=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcrypto_mac-f38b8183e7dcb591.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name libsecp256k1_core --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-core-0.2.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"std\"))" -C metadata=88c26c6217e4e47b -C extra-filename=-a7ae269394e457fe --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern crunchy=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcrunchy-005195b2187c8fd6.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern subtle=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsubtle-f7eeb6269ad54a50.rmeta --cap-lints allow -C target-cpu=native`
    Checking hmac-drbg v0.3.0
    Checking digest v0.10.7
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name hmac_drbg --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\hmac-drbg-0.3.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=073c8e950c8722e1 -C extra-filename=-73924202e69a9c5f --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --extern hmac=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libhmac-d43a84c50e969888.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name digest --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\digest-0.10.7\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"block-buffer\"" --cfg "feature=\"core-api\"" --cfg "feature=\"default\"" --cfg "feature=\"mac\"" --cfg "feature=\"subtle\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"blobby\", \"block-buffer\", \"const-oid\", \"core-api\", \"default\", \"dev\", \"mac\", \"oid\", \"rand_core\", \"std\", \"subtle\"))" -C metadata=65e452afc6c8080f -C extra-filename=-a1704fc9d364dd15 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern block_buffer=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblock_buffer-af944a66b421ddbb.rmeta --extern crypto_common=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcrypto_common-8cf362b3d3f78b87.rmeta --extern subtle=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsubtle-f7eeb6269ad54a50.rmeta --cap-lints allow -C target-cpu=native`
    Checking curve25519-dalek v3.2.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name curve25519_dalek --edition=2015 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\curve25519-dalek-3.2.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"alloc\"" --cfg "feature=\"default\"" --cfg "feature=\"std\"" --cfg "feature=\"u64_backend\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"alloc\", \"avx2_backend\", \"default\", \"fiat-crypto\", \"fiat_u32_backend\", \"fiat_u64_backend\", \"nightly\", \"packed_simd\", \"serde\", \"simd_backend\", \"std\", \"u32_backend\", \"u64_backend\"))" -C metadata=0d91b332a8023564 -C extra-filename=-8f91d769721304db --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern byteorder=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbyteorder-8eaf5ae74c5d522f.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern rand_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand_core-d698ff5f7d71230c.rmeta --extern subtle=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsubtle-f7eeb6269ad54a50.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name solana_frozen_abi --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-frozen-abi-1.9.29\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=f9d2bac4f4cbd5ec -C extra-filename=-87cc95293830a82d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern bs58=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbs58-3d91bb0635b1008a.rmeta --extern bv=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbv-1dd8df4529895e0d.rmeta --extern generic_array=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libgeneric_array-bd647ac3550c42af.rmeta --extern log=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblog-53d7cc73b8cbd92b.rmeta --extern memmap2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemmap2-b31b9b7b1dcac6e7.rmeta --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --extern serde_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\serde_derive-f952144cd27e3d64.dll --extern sha2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsha2-658d5d900e8b065b.rmeta --extern solana_frozen_abi_macro=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\solana_frozen_abi_macro-fd04920282261290.dll --extern solana_logger=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_logger-ad0acdb44aa0627f.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib --cfg RUSTC_WITHOUT_SPECIALIZATION`
    Checking sha3 v0.9.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name blake3 --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\blake3-1.7.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --cfg "feature=\"traits-preview\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"digest\", \"mmap\", \"neon\", \"no_avx2\", \"no_avx512\", \"no_neon\", \"no_sse2\", \"no_sse41\", \"prefer_intrinsics\", \"pure\", \"rayon\", \"serde\", \"std\", \"traits-preview\", \"wasm32_simd\", \"zeroize\"))" -C metadata=5b62b2fea4524f47 -C extra-filename=-6c653aef1ad68a38 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern arrayref=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayref-448db2eb1c2314ce.rmeta --extern arrayvec=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayvec-d8fb61ce9e9fb746.rmeta --extern cfg_if=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcfg_if-0bbb4ae55c831e4c.rmeta --extern constant_time_eq=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libconstant_time_eq-31ac0225117e87cb.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-a1704fc9d364dd15.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -l static=blake3_sse2_sse41_avx2_assembly -l static=blake3_avx512_assembly --cfg blake3_sse2_ffi --cfg blake3_sse41_ffi --cfg blake3_avx2_ffi --cfg blake3_avx512_ffi --check-cfg "cfg(blake3_sse2_ffi, values(none()))" --check-cfg "cfg(blake3_sse2_rust, values(none()))" --check-cfg "cfg(blake3_sse41_ffi, values(none()))" --check-cfg "cfg(blake3_sse41_rust, values(none()))" --check-cfg "cfg(blake3_avx2_ffi, values(none()))" --check-cfg "cfg(blake3_avx2_rust, values(none()))" --check-cfg "cfg(blake3_avx512_ffi, values(none()))" --check-cfg "cfg(blake3_neon, values(none()))" --check-cfg "cfg(blake3_wasm32_simd, values(none()))"`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name sha3 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\sha3-0.9.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"std\"))" -C metadata=2271335865026cc4 -C extra-filename=-4a9aca91e1e875f3 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern block_buffer=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblock_buffer-118052d1474852e0.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern keccak=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libkeccak-ef88f91e09eef8ff.rmeta --extern opaque_debug=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libopaque_debug-2d2675cff173d2d7.rmeta --cap-lints allow -C target-cpu=native`
   Compiling proc-macro-crate v0.1.5
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name proc_macro_crate --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\proc-macro-crate-0.1.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=7b9b29899f075bf6 -C extra-filename=-7ebbeb7da8dc9c7d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern toml=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtoml-515308f5a8f31342.rmeta --cap-lints allow -C target-cpu=native`
   Compiling shank_render v0.0.1
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name shank_render --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\shank_render-0.0.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=14927fac73c291ce -C extra-filename=-677a5bef9cd2431a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern shank_macro_impl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libshank_macro_impl-77e63df4e3df5c07.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name libsecp256k1 --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\libsecp256k1-0.6.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"hmac\"" --cfg "feature=\"hmac-drbg\"" --cfg "feature=\"sha2\"" --cfg "feature=\"static-context\"" --cfg "feature=\"std\"" --cfg "feature=\"typenum\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"hmac\", \"hmac-drbg\", \"lazy-static-context\", \"lazy_static\", \"sha2\", \"static-context\", \"std\", \"typenum\"))" -C metadata=64f5a38c9ab15628 -C extra-filename=-fc6ab092cf250c43 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern arrayref=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayref-448db2eb1c2314ce.rmeta --extern base64=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbase64-eb660678e7cf2175.rmeta --extern digest=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libdigest-6ca3504e575e51bd.rmeta --extern hmac_drbg=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libhmac_drbg-73924202e69a9c5f.rmeta --extern libsecp256k1_core=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1_core-a7ae269394e457fe.rmeta --extern rand=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand-95f039009198f95c.rmeta --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --extern sha2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsha2-658d5d900e8b065b.rmeta --extern typenum=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libtypenum-e357d787e741afdb.rmeta --cap-lints allow -C target-cpu=native`
   Compiling anchor-syn v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_syn --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-syn-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"hash\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\", \"default\", \"hash\", \"idl\", \"init-if-needed\", \"seeds\"))" -C metadata=1e7a51b6c9cc5e4c -C extra-filename=-671c07ff50da6136 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rmeta --extern bs58=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbs58-067b26eaf93b8f74.rmeta --extern heck=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libheck-37547b579ff1d4de.rmeta --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rmeta --extern proc_macro2_diagnostics=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2_diagnostics-07d87b78b23b16cb.rmeta --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rmeta --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-b3cf61fd9029a210.rmeta --extern serde_json=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde_json-469e367f9ff0ad3c.rmeta --extern sha2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsha2-8a094d2597201d0c.rmeta --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-9d343cf97c880a4c.rmeta --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name regex --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\regex-1.11.1\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg "feature=\"default\"" --cfg "feature=\"perf\"" --cfg "feature=\"perf-backtrack\"" --cfg "feature=\"perf-cache\"" --cfg "feature=\"perf-dfa\"" --cfg "feature=\"perf-inline\"" --cfg "feature=\"perf-literal\"" --cfg "feature=\"perf-onepass\"" --cfg "feature=\"std\"" --cfg "feature=\"unicode\"" --cfg "feature=\"unicode-age\"" --cfg "feature=\"unicode-bool\"" --cfg "feature=\"unicode-case\"" --cfg "feature=\"unicode-gencat\"" --cfg "feature=\"unicode-perl\"" --cfg "feature=\"unicode-script\"" --cfg "feature=\"unicode-segment\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"logging\", \"pattern\", \"perf\", \"perf-backtrack\", \"perf-cache\", \"perf-dfa\", \"perf-dfa-full\", \"perf-inline\", \"perf-literal\", \"perf-onepass\", \"std\", \"unicode\", \"unicode-age\", \"unicode-bool\", \"unicode-case\", \"unicode-gencat\", \"unicode-perl\", \"unicode-script\", \"unicode-segment\", \"unstable\", \"use_std\"))" -C metadata=4c4de90f6c6dfd97 -C extra-filename=-ae515242136eefb8 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern aho_corasick=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libaho_corasick-4c14c4d694543a78.rmeta --extern memchr=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmemchr-5e3540f72e1169fa.rmeta --extern regex_automata=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_automata-16f8b97249062c1a.rmeta --extern regex_syntax=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex_syntax-87d7eb20894f31d1.rmeta --cap-lints allow -C target-cpu=native`
   Compiling shank_macro v0.0.12
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name shank_macro --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\shank_macro-0.0.12\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=adc501e093c42879 -C extra-filename=-a0849bb441f90b3a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern shank_macro_impl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libshank_macro_impl-77e63df4e3df5c07.rlib --extern shank_render=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libshank_render-677a5bef9cd2431a.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
   Compiling borsh-derive v0.9.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name borsh_derive --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\borsh-derive-0.9.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=d27da4fa5ac025ef -C extra-filename=-aa7f871f9c532e9c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern borsh_derive_internal=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh_derive_internal-abea1a98efe1648d.rlib --extern borsh_schema_derive_internal=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh_schema_derive_internal-3099015dd0088f5a.rlib --extern proc_macro_crate=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro_crate-7ebbeb7da8dc9c7d.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
    Checking borsh v0.9.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name borsh --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\borsh-0.9.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"std\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"const-generics\", \"default\", \"rc\", \"std\"))" -C metadata=8efd7d59f9dd8674 -C extra-filename=-84362225174a195b --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern borsh_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\borsh_derive-aa7f871f9c532e9c.dll --extern hashbrown=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libhashbrown-1242a4c65de5a5e9.rmeta --cap-lints allow -C target-cpu=native`
    Checking shank v0.0.12
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name shank --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\shank-0.0.12\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=2f6a81d769e1a827 -C extra-filename=-97091dab5f875a6a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern shank_macro=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\shank_macro-a0849bb441f90b3a.dll --cap-lints allow -C target-cpu=native`
   Compiling anchor-attribute-interface v0.24.2
   Compiling anchor-attribute-state v0.24.2
   Compiling anchor-attribute-constant v0.24.2
   Compiling anchor-attribute-access-control v0.24.2
   Compiling anchor-attribute-error v0.24.2
   Compiling anchor-attribute-account v0.24.2
   Compiling anchor-attribute-event v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_access_control --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-access-control-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=62234812eda7f65c -C extra-filename=-6f2e05c1e15b399d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern regex=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libregex-ae515242136eefb8.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_state --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-state-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=6feac4f588cff7d1 -C extra-filename=-c67b5015e54dc1fa --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_interface --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-interface-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=4505b0fb00f586dd -C extra-filename=-5ff85107a2de43a6 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern heck=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libheck-37547b579ff1d4de.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_constant --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-constant-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=924cded85e8489b3 -C extra-filename=-5f5bbe16c5d42914 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_account --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-account-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=31290da8436232f3 -C extra-filename=-ffded41688267a97 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern bs58=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbs58-c049b8665a31f53e.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern rustversion=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\rustversion-d8c4e5ed4ac2a2eb.dll --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_event --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-event-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=fed846f9cf4620f2 -C extra-filename=-1f351549bc94f241 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_error --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-error-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=7db499b7092b550f -C extra-filename=-767aad6c4ef7829d --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
   Compiling anchor-attribute-program v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_attribute_program --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-attribute-program-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\"))" -C metadata=87cc9b44ef33c09f -C extra-filename=-ed175514e2585aca --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
   Compiling anchor-derive-accounts v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_derive_accounts --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-derive-accounts-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C embed-bitcode=no --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\", \"default\", \"init-if-needed\"))" -C metadata=4c81e12586eec6b3 -C extra-filename=-e26c346792de5acc --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_syn-671c07ff50da6136.rlib --extern anyhow=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanyhow-9ed3147a547d5ca1.rlib --extern proc_macro2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libproc_macro2-c9b758d1c4962405.rlib --extern quote=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libquote-73b6963fd7bfb93c.rlib --extern syn=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsyn-f9b3a22918ac187a.rlib --extern proc_macro --cap-lints allow -C target-cpu=native`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name solana_program --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type rlib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values())" -C metadata=e376f3eac8bc8eb1 -C extra-filename=-28c9b9df80259448 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern base64=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbase64-ae7fb19acb077eba.rmeta --extern bincode=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbincode-5886f9cfef6243ec.rmeta --extern bitflags=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbitflags-ae7a4e8c05939995.rmeta --extern blake3=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libblake3-6c653aef1ad68a38.rmeta --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern borsh_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\borsh_derive-aa7f871f9c532e9c.dll --extern bs58=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbs58-3d91bb0635b1008a.rmeta --extern bv=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbv-1dd8df4529895e0d.rmeta --extern bytemuck=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbytemuck-1e4e17d4ac088281.rmeta --extern curve25519_dalek=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libcurve25519_dalek-8f91d769721304db.rmeta --extern itertools=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libitertools-dbd17f031e12f3f0.rmeta --extern lazy_static=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblazy_static-442eb4db3c183de4.rmeta --extern libsecp256k1=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblibsecp256k1-fc6ab092cf250c43.rmeta --extern log=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\liblog-53d7cc73b8cbd92b.rmeta --extern num_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\num_derive-32c076bfba803db1.dll --extern num_traits=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libnum_traits-6b9d5647ebd588b8.rmeta --extern rand=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\librand-95f039009198f95c.rmeta --extern rustversion=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\rustversion-d8c4e5ed4ac2a2eb.dll --extern serde=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde-aad22bb475d6f185.rmeta --extern serde_bytes=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libserde_bytes-133020cb0bbf73bf.rmeta --extern serde_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\serde_derive-f952144cd27e3d64.dll --extern sha2=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsha2-658d5d900e8b065b.rmeta --extern sha3=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsha3-4a9aca91e1e875f3.rmeta --extern solana_frozen_abi=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_frozen_abi-87cc95293830a82d.rmeta --extern solana_frozen_abi_macro=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\solana_frozen_abi_macro-fd04920282261290.dll --extern solana_logger=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_logger-ad0acdb44aa0627f.rmeta --extern solana_sdk_macro=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\solana_sdk_macro-4ed82ba46506b111.dll --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern wasm_bindgen=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libwasm_bindgen-68c6c6d8ead29da7.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib --cfg RUSTC_WITHOUT_SPECIALIZATION`
    Checking spl-token v3.3.0
    Checking anchor-lang v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name spl_token --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\spl-token-3.3.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"no-entrypoint\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no-entrypoint\", \"test-bpf\"))" -C metadata=36965fb503b1550b -C extra-filename=-aae92c910373d728 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern arrayref=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayref-448db2eb1c2314ce.rmeta --extern num_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\num_derive-32c076bfba803db1.dll --extern num_traits=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libnum_traits-6b9d5647ebd588b8.rmeta --extern num_enum=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libnum_enum-a89f9de6653379a1.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_lang --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"derive\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"anchor-debug\", \"default\", \"derive\", \"init-if-needed\"))" -C metadata=8987a3698f90d9c4 -C extra-filename=-a9a7271d09e12f3c --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_attribute_access_control=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_access_control-6f2e05c1e15b399d.dll --extern anchor_attribute_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_account-ffded41688267a97.dll --extern anchor_attribute_constant=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_constant-5f5bbe16c5d42914.dll --extern anchor_attribute_error=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_error-767aad6c4ef7829d.dll --extern anchor_attribute_event=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_event-1f351549bc94f241.dll --extern anchor_attribute_interface=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_interface-5ff85107a2de43a6.dll --extern anchor_attribute_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_program-ed175514e2585aca.dll --extern anchor_attribute_state=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_attribute_state-c67b5015e54dc1fa.dll --extern anchor_derive_accounts=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\anchor_derive_accounts-e26c346792de5acc.dll --extern arrayref=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayref-448db2eb1c2314ce.rmeta --extern base64=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbase64-ae7fb19acb077eba.rmeta --extern bincode=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbincode-5886f9cfef6243ec.rmeta --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern bytemuck=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libbytemuck-1e4e17d4ac088281.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking spl-associated-token-account v1.0.5
    Checking mpl-token-vault v0.1.0
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name spl_associated_token_account --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\spl-associated-token-account-1.0.5\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --cfg "feature=\"no-entrypoint\"" --cfg "feature=\"no-token-entrypoint\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"default\", \"no-entrypoint\", \"no-token-entrypoint\", \"test-bpf\"))" -C metadata=4a2e179a4d14fd72 -C extra-filename=-5cf6e5b1de8fe627 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name mpl_token_vault --edition=2018 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\mpl-token-vault-0.1.0\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"no-entrypoint\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no-entrypoint\", \"test-bpf\"))" -C metadata=22a94dc27d91339a -C extra-filename=-72057453dd63ccfd --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern num_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\num_derive-32c076bfba803db1.dll --extern num_traits=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libnum_traits-6b9d5647ebd588b8.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking mpl-token-metadata v1.4.3
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name mpl_token_metadata --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\mpl-token-metadata-1.4.3\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"no-entrypoint\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"no-entrypoint\", \"serde\", \"serde-feature\", \"serde_with\", \"test-bpf\"))" -C metadata=1e2a195af78fc442 -C extra-filename=-a288b889fd49ae3a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern arrayref=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libarrayref-448db2eb1c2314ce.rmeta --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern mpl_token_vault=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmpl_token_vault-72057453dd63ccfd.rmeta --extern num_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\num_derive-32c076bfba803db1.dll --extern num_traits=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libnum_traits-6b9d5647ebd588b8.rmeta --extern shank=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libshank-97091dab5f875a6a.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking anchor-spl v0.24.2
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name anchor_spl --edition=2021 C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-spl-0.24.2\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"associated_token\"" --cfg "feature=\"default\"" --cfg "feature=\"mint\"" --cfg "feature=\"spl-associated-token-account\"" --cfg "feature=\"spl-token\"" --cfg "feature=\"token\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"associated_token\", \"default\", \"devnet\", \"dex\", \"governance\", \"mint\", \"serum_dex\", \"shmem\", \"spl-associated-token-account\", \"spl-token\", \"token\"))" -C metadata=034541339e3612dc -C extra-filename=-d79ad30e20f349db --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --cap-lints allow -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking claims-processor v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\claims-processor)
    Checking escrow-program v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\escrow-program)
    Checking staking-program v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\staking-program)
    Checking insurance-program v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\insurance-program)
    Checking freelance-shield-core v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\core)
    Checking enhanced-cover v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\enhanced-cover)
    Checking dao-governance v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\dao-governance)
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name claims_processor --edition=2021 programs\claims-processor\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=413b9b631550f47d -C extra-filename=-a153f6b3b5909fc4 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name escrow_program --edition=2021 programs\escrow-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=49fef776f7dd5dcf -C extra-filename=-b13b10bf7cf6ab78 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name insurance_program --edition=2021 programs\insurance-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=d5adf3f9933f48bf -C extra-filename=-779e4591e1b0c281 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name staking_program --edition=2021 programs\staking-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=b8095859c8434c05 -C extra-filename=-a1b5625145d8ced7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name freelance_shield_core --edition=2021 programs\core\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=30bf5b2d22e93124 -C extra-filename=-6395fb16ce128390 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name enhanced_cover --edition=2021 programs\enhanced-cover\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=b28b0e3f856d598b -C extra-filename=-12a5d985400178ed --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name dao_governance --edition=2021 programs\dao-governance\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=71e459729c5a4575 -C extra-filename=-58ccb14fa72a1d51 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
    Checking policy-nft v0.1.0 (C:\Projects\FreelanceShield\freelance-safeguard-contracts\programs\policy-nft)
     Running `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name policy_nft --edition=2021 programs\policy-nft\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=28c8731f331f3d5f -C extra-filename=-0c5462667f99a22a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern borsh_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\borsh_derive-aa7f871f9c532e9c.dll --extern mpl_token_metadata=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmpl_token_metadata-a288b889fd49ae3a.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib`
error: pubkey array is not 32 bytes long: len=33
  --> programs\enhanced-cover\src\lib.rs:10:80
   |
10 | pub const POLICY_NFT_PROGRAM_ID: Pubkey = anchor_lang::solana_program::pubkey!("NFTpLcy1UQCJcZBEYzgHNUaehDQoqTuNFWJJdT9eLLRW");
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: the payer specified for an init constraint must be mutable.
   --> programs\enhanced-cover\src\lib.rs:478:9
    |
478 |     pub cover_product: Account<'info, CoverProduct>,
    |         ^^^^^^^^^^^^^

error: the payer specified for an init constraint must be mutable.
  --> programs\core\src\instructions\product\create.rs:31:9
   |
31 |     pub product: Account<'info, Product>,
   |         ^^^^^^^

error: More than one fallback function found
   --> programs\staking-program\src\lib.rs:821:5
    |
821 |     /// Check liquidity reserves before unstaking
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
   --> programs\dao-governance\src\lib.rs:372:9
    |
372 |         init_if_needed,
    |         ^^^^^^^^^^^^^^

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
   --> programs\staking-program\src\lib.rs:959:9
    |
959 |         init_if_needed,
    |         ^^^^^^^^^^^^^^

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
   --> programs\escrow-program\src\lib.rs:922:9
    |
922 |         init_if_needed,
    |         ^^^^^^^^^^^^^^

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
  --> programs\core\src\instructions\policy\tokenize.rs:74:9
   |
74 |         init_if_needed,
   |         ^^^^^^^^^^^^^^

error[E0432]: unresolved import `crate`
  --> programs\enhanced-cover\src\lib.rs:18:1
   |
18 | #[program]
   | ^^^^^^^^^^ could not find `__client_accounts_create_cover_product` in the crate root
   |
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0433]: failed to resolve: could not find `solana_program` in the list of imported crates
  --> programs\insurance-program\src\lib.rs:17:42
   |
17 | pub const RISK_POOL_PROGRAM_ID: Pubkey = anchor_lang::solana_program::pubkey!("HC1TQHR6kVqtq48UbTYGwHwHTUYom9W3ovNVgjPgNcFg");
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `solana_program` in the list of imported crates
   |
   = note: this error originates in the macro `anchor_lang::solana_program::pubkey` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider importing this struct
   |
1  + use anchor_lang::prelude::Pubkey;
   |

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\enhanced-cover\src\lib.rs:18:1
   |
18 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\enhanced-cover\src\lib.rs:18:1
   |
18 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `Mint`
 --> programs\enhanced-cover\src\lib.rs:2:62
  |
2 | use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint};
  |                                                              ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `anchor_spl::associated_token::AssociatedToken`
 --> programs\enhanced-cover\src\lib.rs:3:5
  |
3 | use anchor_spl::associated_token::AssociatedToken;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\enhanced-cover\src\lib.rs:18:1
   |
18 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\enhanced-cover\src\lib.rs:440:10
    |
440 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\enhanced-cover\src\lib.rs:484:10
    |
484 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\enhanced-cover\src\lib.rs:501:10
    |
501 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\insurance-program\src\lib.rs:19:1
   |
19 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\insurance-program\src\lib.rs:19:1
   |
19 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `__client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `__client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `__client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `anchor_spl::associated_token::AssociatedToken`
 --> programs\insurance-program\src\lib.rs:3:5
  |
3 | use anchor_spl::associated_token::AssociatedToken;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\insurance-program\src\lib.rs:19:1
   |
19 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\insurance-program\src\lib.rs:541:10
    |
541 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\insurance-program\src\lib.rs:558:10
    |
558 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\insurance-program\src\lib.rs:595:10
    |
595 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\insurance-program\src\lib.rs:630:10
    |
630 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\insurance-program\src\lib.rs:645:10
    |
645 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
   --> programs\policy-nft\src\lib.rs:363:9
    |
363 |         init_if_needed,
    |         ^^^^^^^^^^^^^^

warning: unused imports: `Transfer` and `self`
 --> programs\staking-program\src\lib.rs:2:25
  |
2 | use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint};
  |                         ^^^^                       ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `anchor_spl::associated_token::AssociatedToken`
 --> programs\staking-program\src\lib.rs:3:5
  |
3 | use anchor_spl::associated_token::AssociatedToken;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\staking-program\src\lib.rs:930:10
    |
930 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\staking-program\src\lib.rs:987:10
    |
987 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1026:10
     |
1026 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1041:10
     |
1041 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1080:10
     |
1080 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1095:10
     |
1095 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1112:10
     |
1112 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
  --> programs\core\src\instructions\risk\deposit.rs:33:9
   |
33 |         init_if_needed,
   |         ^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\staking-program\src\lib.rs:1126:10
     |
1126 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error: init_if_needed requires that anchor-lang be imported with the init-if-needed cargo feature enabled. Carefully read the init_if_needed docs before using this feature to make sure you know how to protect yourself against re-initialization attacks.
  --> programs\core\src\instructions\risk\simulate.rs:31:9
   |
31 |         init_if_needed,
   |         ^^^^^^^^^^^^^^

error[E0432]: unresolved import `crate`
 --> programs\dao-governance\src\lib.rs:6:1
  |
6 | #[program]
  | ^^^^^^^^^^ could not find `__client_accounts_stake_tokens` in the crate root
  |
  = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-heap`
 --> programs\dao-governance\src\lib.rs:6:1
  |
6 | #[program]
  | ^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
  = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default
  = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
 --> programs\dao-governance\src\lib.rs:6:1
  |
6 | #[program]
  | ^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
  = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `Mint`
 --> programs\dao-governance\src\lib.rs:2:62
  |
2 | use anchor_spl::token::{self, Token, TokenAccount, Transfer, Mint};
  |                                                              ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\dao-governance\src\lib.rs:6:1
  |
6 | #[program]
  | ^^^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `program` crate for guidance on how handle this unexpected cfg
  = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:343:10
    |
343 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:397:10
    |
397 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:433:10
    |
433 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:463:10
    |
463 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:493:10
    |
493 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:507:10
    |
507 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\dao-governance\src\lib.rs:522:10
    |
522 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0433]: failed to resolve: could not find `solana_program` in the list of imported crates
 --> programs\claims-processor\src\lib.rs:8:42
  |
8 | pub const INSURANCE_PROGRAM_ID: Pubkey = anchor_lang::solana_program::pubkey!("2vFoxWTSRERwtcfwEb6Zgm2iWS3ewU1Y94K224Gw7CJm");
  |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `solana_program` in the list of imported crates
  |
  = note: this error originates in the macro `anchor_lang::solana_program::pubkey` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider importing this struct
  |
1 + use anchor_lang::prelude::Pubkey;
  |

error[E0433]: failed to resolve: could not find `solana_program` in the list of imported crates
 --> programs\claims-processor\src\lib.rs:9:42
  |
9 | pub const RISK_POOL_PROGRAM_ID: Pubkey = anchor_lang::solana_program::pubkey!("HC1TQHR6kVqtq48UbTYGwHwHTUYom9W3ovNVgjPgNcFg");
  |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `solana_program` in the list of imported crates
  |
  = note: this error originates in the macro `anchor_lang::solana_program::pubkey` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider importing this struct
  |
1 + use anchor_lang::prelude::Pubkey;
  |

error[E0422]: cannot find struct, variant or union type `Instruction` in this scope
   --> programs\claims-processor\src\lib.rs:488:23
    |
488 |     let instruction = Instruction {
    |                       ^^^^^^^^^^^ help: a struct with a similar name exists: `Instructions`
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\src\sysvar\instructions.rs:18:1
    |
18  | pub struct Instructions();
    | ----------------------- similarly named struct `Instructions` defined here

error[E0603]: crate `anchor_lang` is private
   --> programs\claims-processor\src\lib.rs:503:18
    |
503 |     anchor_lang::anchor_lang::anchor_lang::solana_program::program::invoke_signed(
    |                  ^^^^^^^^^^^ private crate                          ------------- function `invoke_signed` is not publicly re-exported
    |
note: the crate `anchor_lang` is defined here
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
    |
24  | extern crate self as anchor_lang;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: crate `anchor_lang` is private
   --> programs\claims-processor\src\lib.rs:519:34
    |
519 |     let signature = anchor_lang::anchor_lang::anchor_lang::solana_program::hash::hash(signature_base.as_bytes()).to_string();
    |                                  ^^^^^^^^^^^ private crate                       ---- function `hash` is not publicly re-exported
    |
note: the crate `anchor_lang` is defined here
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
    |
24  | extern crate self as anchor_lang;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\claims-processor\src\lib.rs:11:1
   |
11 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\claims-processor\src\lib.rs:11:1
   |
11 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused imports: `Transfer` and `self`
 --> programs\claims-processor\src\lib.rs:2:25
  |
2 | use anchor_spl::token::{self, Token, TokenAccount, Transfer};
  |                         ^^^^                       ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\claims-processor\src\lib.rs:11:1
   |
11 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `anchor_spl::metadata`
 --> programs\policy-nft\src\lib.rs:3:17
  |
3 | use anchor_spl::metadata::{
  |                 ^^^^^^^^ could not find `metadata` in `anchor_spl`

error[E0432]: unresolved import `crate`
  --> programs\policy-nft\src\lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^ could not find `__client_accounts_transfer_policy_nft` in the crate root
   |
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:534:10
    |
534 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:551:10
    |
551 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:643:10
    |
643 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:659:10
    |
659 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `try_accounts` found for struct `CreateCoverProduct` in the current scope
   --> programs\enhanced-cover\src\lib.rs:18:1
    |
18  | #[program]
    | ^^^^^^^^^^ function or associated item not found in `CreateCoverProduct<'_>`
...
459 | pub struct CreateCoverProduct<'info> {
    | ------------------------------------ function or associated item `try_accounts` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
            candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
   --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
    = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `CreateCoverProduct<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\enhanced-cover\src\lib.rs:18:1
   |
18 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `CreateCoverProduct<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             BuyCover<'info>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             Ctor<'info>
           and 39 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0603]: crate `anchor_lang` is private
  --> programs\policy-nft\src\lib.rs:11:18
   |
11 | use anchor_lang::anchor_lang::solana_program::program::invoke_signed;
   |                  ^^^^^^^^^^^ private crate
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: consider importing this module instead
   |
11 | use solana_program::program::invoke_signed;
   |     ~~~~~~~~~~~~~~~~~~~~~~~

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\policy-nft\src\lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\policy-nft\src\lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused imports: `UseMethod` and `Uses`
  --> programs\policy-nft\src\lib.rs:10:62
   |
10 | use mpl_token_metadata::state::{Creator, DataV2, Collection, Uses, UseMethod};
   |                                                              ^^^^  ^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Collection`, `EditionMarker`, `Edition`, `MasterEdition`, and `Uses`
 --> programs\policy-nft\src\metadata_wrapper.rs:4:14
  |
4 |     Creator, Collection, Uses, UseMethod, 
  |              ^^^^^^^^^^  ^^^^
5 |     Metadata, Edition, MasterEdition, EditionMarker, Key
  |               ^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `mpl_token_metadata::instruction::*`
 --> programs\policy-nft\src\metadata_wrapper.rs:7:5
  |
7 | use mpl_token_metadata::instruction::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\policy-nft\src\lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\policy-nft\src\lib.rs:257:10
    |
257 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\policy-nft\src\lib.rs:292:10
    |
292 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\policy-nft\src\lib.rs:376:10
    |
376 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\policy-nft\src\lib.rs:398:10
    |
398 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::AccountSerialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:17
    |
750 |     pub policy: Account<'info, Policy>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ the trait `anchor_lang::AccountSerialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountSerialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:30
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                              ^^^^^^^^^^^^^^^^ required by this bound in `Account`

error[E0277]: the trait bound `Policy: anchor_lang::AccountDeserialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:17
    |
750 |     pub policy: Account<'info, Policy>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ the trait `anchor_lang::AccountDeserialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountDeserialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:49
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                 ^^^^^^^^^^^^^^^^^^ required by this bound in `Account`

error[E0277]: the trait bound `Policy: anchor_lang::Owner` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:17
    |
750 |     pub policy: Account<'info, Policy>,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ the trait `anchor_lang::Owner` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::Owner`:
              ArbitratorAccount
              Claim
              ClaimsState
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:70
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                                      ^^^^^ required by this bound in `Account`

error[E0432]: unresolved import `crate`
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^ could not find `__client_accounts_create_escrow` in the crate root
   |
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0432]: unresolved import `anchor_spl::metadata`
 --> programs\core\src\instructions\policy\tokenize.rs:4:17
  |
4 | use anchor_spl::metadata::{
  |                 ^^^^^^^^ could not find `metadata` in `anchor_spl`

error[E0432]: unresolved import `state::params`
  --> programs\core\src\lib.rs:42:16
   |
42 | pub use state::params::*;
   |                ^^^^^^ could not find `params` in `state`

error[E0432]: unresolved import `__client_accounts_option`
 --> programs\core\src\instructions\claim\vote.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^ use of undeclared crate or module `__client_accounts_option`
  |
  = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
  --> programs\policy-nft\src\metadata_wrapper.rs:48:1
   |
48 | impl BorshSerialize for UseMethod {
   | ^^^^^^^^^^^^^^^^^^^^^^^^---------
   |                         |
   |                         `UseMethod` is not defined in the current crate
   |
   = note: impl doesn't have any local type before any uncovered type parameters
   = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
   = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
  --> programs\policy-nft\src\metadata_wrapper.rs:76:1
   |
76 | impl BorshSerialize for Key {
   | ^^^^^^^^^^^^^^^^^^^^^^^^---
   |                         |
   |                         `mpl_token_metadata::state::Key` is not defined in the current crate
   |
   = note: impl doesn't have any local type before any uncovered type parameters
   = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
   = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> programs\policy-nft\src\metadata_wrapper.rs:121:1
    |
121 | impl BorshSerialize for MetadataInstruction {
    | ^^^^^^^^^^^^^^^^^^^^^^^^-------------------
    |                         |
    |                         `mpl_token_metadata::instruction::MetadataInstruction` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
  --> programs\policy-nft\src\metadata_wrapper.rs:60:1
   |
60 | impl BorshDeserialize for UseMethod {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^---------
   |                           |
   |                           `UseMethod` is not defined in the current crate
   |
   = note: impl doesn't have any local type before any uncovered type parameters
   = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
   = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
  --> programs\policy-nft\src\metadata_wrapper.rs:95:1
   |
95 | impl BorshDeserialize for Key {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^---
   |                           |
   |                           `mpl_token_metadata::state::Key` is not defined in the current crate
   |
   = note: impl doesn't have any local type before any uncovered type parameters
   = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
   = note: define and implement a trait or new type instead

error[E0117]: only traits defined in the current crate can be implemented for types defined outside of the crate
   --> programs\policy-nft\src\metadata_wrapper.rs:457:1
    |
457 | impl BorshDeserialize for MetadataInstruction {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------
    |                           |
    |                           `mpl_token_metadata::instruction::MetadataInstruction` is not defined in the current crate
    |
    = note: impl doesn't have any local type before any uncovered type parameters
    = note: for more information see https://doc.rust-lang.org/reference/items/implementations.html#orphan-rules
    = note: define and implement a trait or new type instead

error[E0432]: unresolved imports `instructions::risk::initialize`, `instructions::risk::update`
  --> programs\core\src\lib.rs:34:9
   |
34 |         initialize::InitializeRiskPool,
   |         ^^^^^^^^^^ could not find `initialize` in `risk`
35 |         simulate::SimulateRisk,
36 |         update::UpdateRiskMetrics,
   |         ^^^^^^ could not find `update` in `risk`

error[E0432]: unresolved import `crate`
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^
   | |
   | unresolved import
   | help: a similar path exists: `instructions::__client_accounts_submit_claim`
   |
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `std::convert::TryFrom`
 --> programs\enhanced-cover\src\lib.rs:4:5
  |
4 | use std::convert::TryFrom;
  |     ^^^^^^^^^^^^^^^^^^^^^

error[E0603]: crate `anchor_lang` is private
  --> programs\escrow-program\src\lib.rs:4:18
   |
4  | use anchor_lang::anchor_lang::solana_program::program::{invoke, invoke_signed};
   |                  ^^^^^^^^^^^ private crate    ------- module `program` is not publicly re-exported
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: crate `anchor_lang` is private
  --> programs\escrow-program\src\lib.rs:5:18
   |
5  | use anchor_lang::anchor_lang::solana_program::instruction::Instruction;
   |                  ^^^^^^^^^^^ private crate    ----------- module `instruction` is not publicly re-exported
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `status` on type `&anchor_lang::prelude::AccountInfo<'_>`
  --> programs\claims-processor\src\lib.rs:58:20
   |
58 |             policy.status == 1, // PolicyStatus::Active
   |                    ^^^^^^ unknown field
   |
   = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `end_date` on type `&anchor_lang::prelude::AccountInfo<'_>`
  --> programs\claims-processor\src\lib.rs:64:20
   |
64 |             policy.end_date > clock.unix_timestamp,
   |                    ^^^^^^^^ unknown field
   |
   = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `coverage_amount` on type `&anchor_lang::prelude::AccountInfo<'_>`
  --> programs\claims-processor\src\lib.rs:70:30
   |
70 |             amount <= policy.coverage_amount,
   |                              ^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `start_date` on type `&anchor_lang::prelude::AccountInfo<'_>`
  --> programs\claims-processor\src\lib.rs:78:62
   |
78 |         let policy_age_days = (clock.unix_timestamp - policy.start_date) / 86400;
   |                                                              ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `coverage_amount` on type `&anchor_lang::prelude::AccountInfo<'_>`
  --> programs\claims-processor\src\lib.rs:84:51
   |
84 |         let amount_risk = (amount as f64 / policy.coverage_amount as f64 * 100.0) as u8;
   |                                                   ^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `coverage_amount` on type `&anchor_lang::prelude::AccountInfo<'_>`
   --> programs\claims-processor\src\lib.rs:104:20
    |
104 |             policy.coverage_amount,
    |                    ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `claims_count` on type `&anchor_lang::prelude::AccountInfo<'_>`
   --> programs\claims-processor\src\lib.rs:105:20
    |
105 |             policy.claims_count,
    |                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0609]: no field `start_date` on type `&anchor_lang::prelude::AccountInfo<'_>`
   --> programs\claims-processor\src\lib.rs:106:43
    |
106 |             clock.unix_timestamp - policy.start_date,
    |                                           ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `key`, `is_signer`, `is_writable`, `lamports`, `data` ... and 3 others

error[E0603]: crate `anchor_lang` is private
  --> programs\escrow-program\src\lib.rs:6:18
   |
6  | use anchor_lang::anchor_lang::solana_program::system_instruction;
   |                  ^^^^^^^^^^^ private crate    ------------------ module `system_instruction` is not publicly re-exported
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::convert::TryFrom`
 --> programs\insurance-program\src\lib.rs:4:5
  |
4 | use std::convert::TryFrom;
  |     ^^^^^^^^^^^^^^^^^^^^^

error[E0603]: crate `anchor_lang` is private
  --> programs\escrow-program\src\lib.rs:11:55
   |
11 | pub const INSURANCE_PROGRAM_ID: Pubkey = anchor_lang::anchor_lang::solana_program::pubkey!("2vFoxWTSRERwtcfwEb6Zgm2iWS3ewU1Y94K224Gw7CJm");
   |                                                       ^^^^^^^^^^^ private crate    ------ macro `pubkey` is not publicly re-exported
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: crate `anchor_lang` is private
  --> programs\escrow-program\src\lib.rs:12:56
   |
12 | pub const REPUTATION_PROGRAM_ID: Pubkey = anchor_lang::anchor_lang::solana_program::pubkey!("jq3B5tb6Teg9A1oDqsD2fGnuhb357vceeMrAuYEmz9d");
   |                                                        ^^^^^^^^^^^ private crate    ------ macro `pubkey` is not publicly re-exported
   |
note: the crate `anchor_lang` is defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:24:1
   |
24 | extern crate self as anchor_lang;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: function `risk_level_to_score` is private
   --> programs\escrow-program\src\lib.rs:845:8
    |
845 |     fn risk_level_to_score(risk: RiskLevel) -> u8 {
    |        ^^^^^^^^^^^^^^^^^^^ private function
    |
note: the function `risk_level_to_score` is defined here
   --> programs\escrow-program\src\lib.rs:845:5
    |
845 |     fn risk_level_to_score(risk: RiskLevel) -> u8 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `try_deserialize` found for struct `Policy` in the current scope
   --> programs\claims-processor\src\lib.rs:117:40
    |
117 |         let mut policy_state = Policy::try_deserialize(&mut &policy_data[..])?;
    |                                        ^^^^^^^^^^^^^^^ function or associated item not found in `Policy`
...
897 | pub struct Policy {
    | ----------------- function or associated item `try_deserialize` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_deserialize`, perhaps you need to implement it:
            candidate #1: `anchor_lang::AccountDeserialize`
help: there is an associated function `deserialize` with a similar name
    |
117 |         let mut policy_state = Policy::deserialize(&mut &policy_data[..])?;
    |                                        ~~~~~~~~~~~

error[E0432]: unresolved imports `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`, `crate::FreelanceShieldError`
  --> programs\core\src\instructions\program\update.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\product\create.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\product\update.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\product\activate.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\product\deactivate.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\policy\purchase.rs:5:5
   |
5  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\policy\cancel.rs:5:5
   |
5  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\policy\renew.rs:5:5
   |
5  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\policy\tokenize.rs:10:5
   |
10 | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\submit.rs:4:5
   |
4  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\vote.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\process.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\pay.rs:4:5
   |
4  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\dispute.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\claim\arbitrate.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\risk\initialize_pool.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\risk\deposit.rs:4:5
   |
4  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\risk\withdraw.rs:4:5
   |
4  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\risk\simulate.rs:4:5
   |
4  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\instructions\risk\update_metrics.rs:3:5
   |
3  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\utils\risk_calculations.rs:2:5
   |
2  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: programs\core\src\error_helpers.rs:2:5
   |
2  | use crate::FreelanceShieldError;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> programs\enhanced-cover\src\lib.rs:109:13
    |
109 |         let mut cover_state_account = ctx.accounts.cover_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0382]: borrow of moved value: `product_name`
   --> programs\enhanced-cover\src\lib.rs:118:34
    |
56  |         product_name: String,
    |         ------------ move occurs because `product_name` has type `String`, which does not implement the `Copy` trait
...
93  |         cover_product.product_name = product_name;
    |                                      ------------ value moved here
...
118 |         msg!("Product Name: {}", product_name);
    |                                  ^^^^^^^^^^^^ value borrowed here after move
    |
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `msg` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider cloning the value if the performance cost is acceptable
    |
93  |         cover_product.product_name = product_name.clone();
    |                                                  ++++++++

error[E0599]: no function or associated item named `try_serialize` found for struct `Policy` in the current scope
   --> programs\claims-processor\src\lib.rs:119:17
    |
119 |         Policy::try_serialize(&policy_state, &mut &mut policy_data[..])?;
    |                 ^^^^^^^^^^^^^ function or associated item not found in `Policy`
...
897 | pub struct Policy {
    | ----------------- function or associated item `try_serialize` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_serialize`, perhaps you need to implement it:
            candidate #1: `anchor_lang::AccountSerialize`
help: there is a method `serialize` with a similar name, but with different arguments
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\borsh-0.9.3\src\ser\mod.rs:44:5
    |
44  |     fn serialize<W: Write>(&self, writer: &mut W) -> Result<()>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0063]: missing field `collection_details` in initializer of `mpl_token_metadata::state::Metadata`
  --> programs\policy-nft\src\metadata_wrapper.rs:21:20
   |
21 |     let metadata = Metadata {
   |                    ^^^^^^^^ missing `collection_details`

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\escrow-program\src\lib.rs:854:10
    |
854 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: variable does not need to be mutable
   --> programs\enhanced-cover\src\lib.rs:249:13
    |
249 |         let mut cover_product_account = ctx.accounts.cover_product.to_account_info();
    |             ----^^^^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> programs\enhanced-cover\src\lib.rs:258:13
    |
258 |         let mut cover_state_account = ctx.accounts.cover_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\escrow-program\src\lib.rs:875:10
    |
875 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\escrow-program\src\lib.rs:939:10
    |
939 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
   --> programs\escrow-program\src\lib.rs:991:10
    |
991 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
    = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
    = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
    = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1025:10
     |
1025 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1071:10
     |
1071 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> programs\claims-processor\src\lib.rs:140:50
    |
140 |             let signature = process_claim_payout(ctx, amount)?;
    |                             -------------------- ^^^ expected `&Context<'_, '_, '_, '_, ...>`, found `Context<'_, '_, '_, '_, SubmitClaim<'_>>`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note: expected reference `&anchor_lang::context::Context<'_, '_, '_, '_, ProcessClaim<'_>>`
                  found struct `anchor_lang::context::Context<'_, '_, '_, '_, SubmitClaim<'_>>`
note: function defined here
   --> programs\claims-processor\src\lib.rs:463:4
    |
463 | fn process_claim_payout(
    |    ^^^^^^^^^^^^^^^^^^^^
464 |     ctx: &Context<ProcessClaim>,
    |     ---------------------------

error: cannot find attribute `account` in this scope
  --> programs\core\src\instructions\risk\mod.rs:43:3
   |
43 | #[account]
   |   ^^^^^^^
   |
help: consider importing one of these attribute macros
   |
7  + use crate::account;
   |
7  + use anchor_lang::account;
   |

warning: variable does not need to be mutable
   --> programs\insurance-program\src\lib.rs:146:13
    |
146 |         let mut insurance_state = ctx.accounts.insurance_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1087:10
     |
1087 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `time_elapsed`
   --> programs\insurance-program\src\lib.rs:184:13
    |
184 |         let time_elapsed = clock.unix_timestamp - policy.start_date;
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_elapsed`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1113:10
     |
1113 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1139:10
     |
1139 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
    --> programs\escrow-program\src\lib.rs:1148:10
     |
1148 | #[derive(Accounts)]
     |          ^^^^^^^^
     |
     = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
     = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
     = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
     = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:30:10
   |
30 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorSerialize;
   |
7  + use anchor_lang::AnchorSerialize;
   |

warning: variable does not need to be mutable
   --> programs\insurance-program\src\lib.rs:223:13
    |
223 |         let mut insurance_state = ctx.accounts.insurance_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0308]: mismatched types
   --> programs\claims-processor\src\lib.rs:212:50
    |
212 |             let signature = process_claim_payout(ctx, claim.amount)?;
    |                             -------------------- ^^^ expected `&Context<'_, '_, '_, '_, ...>`, found `Context<'_, '_, '_, '_, ProcessClaim<'_>>`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note: expected reference `&anchor_lang::context::Context<'_, '_, '_, '_, ProcessClaim<'_>>`
                  found struct `anchor_lang::context::Context<'_, '_, '_, '_, ProcessClaim<'_>>`
note: function defined here
   --> programs\claims-processor\src\lib.rs:463:4
    |
463 | fn process_claim_payout(
    |    ^^^^^^^^^^^^^^^^^^^^
464 |     ctx: &Context<ProcessClaim>,
    |     ---------------------------
help: consider borrowing here
    |
212 |             let signature = process_claim_payout(&ctx, claim.amount)?;
    |                                                  +

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:30:27
   |
30 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorDeserialize;
   |
7  + use anchor_lang::AnchorDeserialize;
   |

error[E0599]: the method `key` exists for reference `&Account<'_, Policy>`, but its trait bounds were not satisfied
   --> programs\claims-processor\src\lib.rs:233:54
    |
233 |         msg!("Claims History for Policy: {}", policy.key());
    |                                                      ^^^ method cannot be called on `&Account<'_, Policy>` due to unsatisfied trait bounds
...
897 | pub struct Policy {
    | ----------------- doesn't satisfy `Policy: anchor_lang::AccountDeserialize`, `Policy: anchor_lang::AccountSerialize` or `Policy: anchor_lang::Owner`
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:1
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    | ----------------------------------------------------------------------------------- doesn't satisfy `_: Key`
    |
    = note: the following trait bounds were not satisfied:
            `Policy: anchor_lang::AccountSerialize`
            which is required by `anchor_lang::prelude::Account<'_, Policy>: anchor_lang::Key`
            `Policy: anchor_lang::AccountDeserialize`
            which is required by `anchor_lang::prelude::Account<'_, Policy>: anchor_lang::Key`
            `Policy: anchor_lang::Owner`
            which is required by `anchor_lang::prelude::Account<'_, Policy>: anchor_lang::Key`
note: the traits `anchor_lang::AccountDeserialize`, `anchor_lang::AccountSerialize`,  and `anchor_lang::Owner` must be implemented
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:148:1
    |
148 | pub trait AccountSerialize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
159 | pub trait AccountDeserialize: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
212 | pub trait Owner {
    | ^^^^^^^^^^^^^^^

error[E0609]: no field `owner` on type `&anchor_lang::prelude::Account<'_, Policy>`
   --> programs\claims-processor\src\lib.rs:234:41
    |
234 |         msg!("Policy Owner: {}", policy.owner);
    |                                         ^^^^^ unknown field

error[E0609]: no field `claims_count` on type `&anchor_lang::prelude::Account<'_, Policy>`
   --> programs\claims-processor\src\lib.rs:235:41
    |
235 |         msg!("Claims Count: {}", policy.claims_count);
    |                                         ^^^^^^^^^^^^ unknown field

error[E0609]: no field `claims_count` on type `&anchor_lang::prelude::Account<'_, Policy>`
   --> programs\claims-processor\src\lib.rs:238:19
    |
238 |         if policy.claims_count > 0 {
    |                   ^^^^^^^^^^^^ unknown field

error[E0609]: no field `claims_count` on type `&anchor_lang::prelude::Account<'_, Policy>`
   --> programs\claims-processor\src\lib.rs:239:45
    |
239 |             msg!("Claims Found: {}", policy.claims_count);
    |                                             ^^^^^^^^^^^^ unknown field

error[E0308]: mismatched types
   --> programs\claims-processor\src\lib.rs:383:50
    |
383 |             let signature = process_claim_payout(ctx, claim.amount)?;
    |                             -------------------- ^^^ expected `&Context<'_, '_, '_, '_, ...>`, found `Context<'_, '_, '_, '_, ArbitrateClaim<'_>>`
    |                             |
    |                             arguments to this function are incorrect
    |
    = note: expected reference `&anchor_lang::context::Context<'_, '_, '_, '_, ProcessClaim<'_>>`
                  found struct `anchor_lang::context::Context<'_, '_, '_, '_, ArbitrateClaim<'_>>`
note: function defined here
   --> programs\claims-processor\src\lib.rs:463:4
    |
463 | fn process_claim_payout(
    |    ^^^^^^^^^^^^^^^^^^^^
464 |     ctx: &Context<ProcessClaim>,
    |     ---------------------------

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:23:10
   |
23 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorSerialize;
   |
7  + use anchor_lang::AnchorSerialize;
   |

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:23:27
   |
23 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorDeserialize;
   |
7  + use anchor_lang::AnchorDeserialize;
   |

error[E0609]: no field `risk_pool` on type `&mut ProcessClaim<'_>`
   --> programs\claims-processor\src\lib.rs:478:39
    |
478 |         AccountMeta::new(ctx.accounts.risk_pool.key(), false),
    |                                       ^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `claims_state`, `claim`, `owner`, `owner_token_account` ... and 6 others

error[E0609]: no field `policy` on type `&mut ProcessClaim<'_>`
   --> programs\claims-processor\src\lib.rs:479:39
    |
479 |         AccountMeta::new(ctx.accounts.policy.key(), false),
    |                                       ^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
479 |         AccountMeta::new(ctx.accounts.claim.policy.key(), false),
    |                                       ++++++

error[E0609]: no field `risk_pool` on type `&mut ProcessClaim<'_>`
   --> programs\claims-processor\src\lib.rs:506:26
    |
506 |             ctx.accounts.risk_pool.to_account_info(),
    |                          ^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `claims_state`, `claim`, `owner`, `owner_token_account` ... and 6 others

error[E0609]: no field `policy` on type `&mut ProcessClaim<'_>`
   --> programs\claims-processor\src\lib.rs:507:26
    |
507 |             ctx.accounts.policy.to_account_info(),
    |                          ^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
507 |             ctx.accounts.claim.policy.to_account_info(),
    |                          ++++++

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:16:10
   |
16 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorSerialize;
   |
7  + use anchor_lang::AnchorSerialize;
   |

error[E0599]: no function or associated item named `try_accounts` found for struct `StakeTokens` in the current scope
   --> programs\dao-governance\src\lib.rs:6:1
    |
6   | #[program]
    | ^^^^^^^^^^ function or associated item not found in `StakeTokens<'_>`
...
361 | pub struct StakeTokens<'info> {
    | ----------------------------- function or associated item `try_accounts` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
            candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
   --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
    = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `StakeTokens<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\dao-governance\src\lib.rs:6:1
   |
6  | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `StakeTokens<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             CreateProposal<'info>
             Ctor<'info>
           and 43 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\risk\mod.rs:16:27
   |
16 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
7  + use crate::AnchorDeserialize;
   |
7  + use anchor_lang::AnchorDeserialize;
   |

error[E0599]: no variant or associated item named `DeprecatedMintNewEditionFromMasterEditionViaToken` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:136:19
    |
136 |             Self::DeprecatedMintNewEditionFromMasterEditionViaToken(args) => {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `MetadataInstruction`
    |
help: there is a variant with a similar name
    |
136 |             Self::DeprecatedMintNewEditionFromMasterEditionViaPrintingToken(args) => {
    |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0599]: no variant or associated item named `BurnV1` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:256:19
    |
256 |             Self::BurnV1 => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:38:10
   |
38 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorSerialize;
   |
8  + use anchor_lang::AnchorSerialize;
   |

error[E0277]: can't compare `&anchor_lang::prelude::Pubkey` with `anchor_lang::prelude::Pubkey`
   --> programs\claims-processor\src\lib.rs:564:35
    |
564 |         constraint = policy.owner == owner.key(),
    |                                   ^^ no implementation for `&anchor_lang::prelude::Pubkey == anchor_lang::prelude::Pubkey`
    |
    = help: the trait `PartialEq<anchor_lang::prelude::Pubkey>` is not implemented for `&anchor_lang::prelude::Pubkey`
help: consider dereferencing here
    |
564 |         constraint = *policy.owner == owner.key(),
    |                      +

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:38:27
   |
38 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorDeserialize;
   |
8  + use anchor_lang::AnchorDeserialize;
   |

error[E0599]: no variant or associated item named `Create` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:259:19
    |
259 |             Self::Create(args) => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0599]: no variant or associated item named `Mint` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:263:19
    |
263 |             Self::Mint(args) => {
    |                   ^^^^ variant or associated item not found in `MetadataInstruction`

error[E0308]: mismatched types
 --> programs\dao-governance\src\lib.rs:6:1
  |
6 | #[program]
  | ^^^^^^^^^^
  | |
  | expected `&[AccountInfo<'_>]`, found `Vec<ProposalAccount>`
  | expected due to this
  |
  = note: expected reference `&[anchor_lang::prelude::AccountInfo<'_>]`
                found struct `Vec<ProposalAccount>`
  = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> programs\dao-governance\src\lib.rs:6:1
   |
6  | #[program]
   | ^^^^^^^^^^
   | |
   | expected `&Pubkey`, found `Pubkey`
   | arguments to this function are incorrect
   |
note: associated function defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:80:8
   |
80 |     fn try_accounts(
   |        ^^^^^^^^^^^^
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> programs\dao-governance\src\lib.rs:6:1
   |
6  | #[program]
   | ^^^^^^^^^^
   | |
   | expected `&Pubkey`, found `Pubkey`
   | arguments to this function are incorrect
   |
note: associated function defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:51:12
   |
51 |     pub fn new(
   |            ^^^
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:29:10
   |
29 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorSerialize;
   |
8  + use anchor_lang::AnchorSerialize;
   |

error[E0308]: mismatched types
   --> programs\dao-governance\src\lib.rs:148:9
    |
7   |   pub mod dao_governance {
    |  _________-
8   | |     use super::*;
9   | |
10  | |     pub fn initialize(
...   |
142 | |     pub fn create_proposal(
    | |__________________________- arguments to this function are incorrect
...
148 |           accounts: Vec<ProposalAccount>,
    |           ^^^^^^^^ expected `Vec<ProposalAccount>`, found `CreateProposal<'_>`
    |
    = note: expected struct `Vec<ProposalAccount>`
               found struct `CreateProposal<'_>`
note: function defined here
   --> programs\dao-governance\src\lib.rs:142:12
    |
142 |     pub fn create_proposal(
    |            ^^^^^^^^^^^^^^^
...
148 |         accounts: Vec<ProposalAccount>,
    |         ------------------------------

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:29:27
   |
29 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorDeserialize;
   |
8  + use anchor_lang::AnchorDeserialize;
   |

error[E0277]: the trait bound `u64: anchor_lang::Accounts<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 44 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Delegate` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:267:19
    |
267 |             Self::Delegate(args) => {
    |                   ^^^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0599]: no variant or associated item named `Revoke` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:271:19
    |
271 |             Self::Revoke(args) => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

error: cannot find derive macro `AnchorSerialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:18:10
   |
18 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |          ^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorSerialize;
   |
8  + use anchor_lang::AnchorSerialize;
   |

error: cannot find derive macro `AnchorDeserialize` in this scope
  --> programs\core\src\instructions\claim\mod.rs:18:27
   |
18 | #[derive(AnchorSerialize, AnchorDeserialize, Clone)]
   |                           ^^^^^^^^^^^^^^^^^
   |
help: consider importing one of these derive macros
   |
8  + use crate::AnchorDeserialize;
   |
8  + use anchor_lang::AnchorDeserialize;
   |

error[E0599]: no variant or associated item named `Lock` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:275:19
    |
275 |             Self::Lock(args) => {
    |                   ^^^^ variant or associated item not found in `MetadataInstruction`

error[E0308]: mismatched types
  --> programs\dao-governance\src\lib.rs:6:1
   |
6  | #[program]
   | ^^^^^^^^^^
   | |
   | expected `&Pubkey`, found `Pubkey`
   | arguments to this method are incorrect
   |
note: method defined here
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:92:8
   |
92 |     fn exit(&self, _program_id: &Pubkey) -> Result<()> {
   |        ^^^^
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Unlock` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:279:19
    |
279 |             Self::Unlock(args) => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

Some errors have detailed explanations: E0277, E0382, E0432, E0599.
For more information about an error, try `rustc --explain E0277`.
error[E0599]: no variant or associated item named `Migrate` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:283:19
    |
283 |             Self::Migrate => {
    |                   ^^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0599]: no method named `to_account_infos` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Transfer` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:286:19
    |
286 |             Self::Transfer(args) => {
    |                   ^^^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0599]: no variant or associated item named `Update` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:290:19
    |
290 |             Self::Update(args) => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0599]: no variant or associated item named `Use` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:294:19
    |
294 |             Self::Use(args) => {
    |                   ^^^ variant or associated item not found in `MetadataInstruction`

warning: `enhanced-cover` (lib) generated 12 warnings
error: could not compile `enhanced-cover` (lib) due to 6 previous errors; 12 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name enhanced_cover --edition=2021 programs\enhanced-cover\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=b28b0e3f856d598b -C extra-filename=-12a5d985400178ed --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `to_account_metas` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^ method not found in `u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `Verify` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:298:19
    |
298 |             Self::Verify(args) => {
    |                   ^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0277]: the trait bound `u64: anchor_lang::AccountsExit<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountsExit<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::AccountsExit<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 43 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

For more information about this error, try `rustc --explain E0433`.
error[E0599]: no variant or associated item named `Unverify` found for enum `mpl_token_metadata::instruction::MetadataInstruction` in the current scope
   --> programs\policy-nft\src\metadata_wrapper.rs:302:19
    |
302 |             Self::Unverify(args) => {
    |                   ^^^^^^^^ variant or associated item not found in `MetadataInstruction`

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:318:19
    |
318 |             Self::V1 { amount, authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:330:19
    |
330 |             Self::V1 { amount, authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:342:19
    |
342 |             Self::V1 { new_update_authority, data, primary_sale_happened, is_mutable, collection, uses, rule_set, authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0220]: associated type `CollectionV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:360:19
    |
360 |             Self::CollectionV1 { authorization_data } => {
    |                   ^^^^^^^^^^^^ associated type `CollectionV1` not found

error[E0220]: associated type `SaleV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:364:19
    |
364 |             Self::SaleV1 { amount, authorization_data } => {
    |                   ^^^^^^ associated type `SaleV1` not found

warning: `insurance-program` (lib) generated 13 warnings
error: could not compile `insurance-program` (lib) due to 1 previous error; 13 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name insurance_program --edition=2021 programs\insurance-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=d5adf3f9933f48bf -C extra-filename=-779e4591e1b0c281 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
error[E0220]: associated type `TransferV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:369:19
    |
369 |             Self::TransferV1 { amount, authorization_data } => {
    |                   ^^^^^^^^^^ associated type `TransferV1` not found

error[E0220]: associated type `DataV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:374:19
    |
374 |             Self::DataV1 { authorization_data } => {
    |                   ^^^^^^ associated type `DataV1` not found

error[E0220]: associated type `UtilityV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:378:19
    |
378 |             Self::UtilityV1 { amount, authorization_data } => {
    |                   ^^^^^^^^^ associated type `UtilityV1` not found

error[E0220]: associated type `StakingV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:383:19
    |
383 |             Self::StakingV1 { amount, authorization_data } => {
    |                   ^^^^^^^^^ associated type `StakingV1` not found

error[E0220]: associated type `StandardV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:388:19
    |
388 |             Self::StandardV1 { amount, authorization_data } => {
    |                   ^^^^^^^^^^ associated type `StandardV1` not found

error[E0220]: associated type `LockedTransferV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:393:19
    |
393 |             Self::LockedTransferV1 { amount, locked_address, authorization_data } => {
    |                   ^^^^^^^^^^^^^^^^ associated type `LockedTransferV1` not found

error[E0220]: associated type `ProgrammableConfigV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:399:19
    |
399 |             Self::ProgrammableConfigV1 { authorization_data } => {
    |                   ^^^^^^^^^^^^^^^^^^^^ associated type `ProgrammableConfigV1` not found

error[E0220]: associated type `AuthorityItemV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:403:19
    |
403 |             Self::AuthorityItemV1 { authorization_data } => {
    |                   ^^^^^^^^^^^^^^^ associated type `AuthorityItemV1` not found

error[E0220]: associated type `DataItemV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:407:19
    |
407 |             Self::DataItemV1 { authorization_data } => {
    |                   ^^^^^^^^^^ associated type `DataItemV1` not found

error[E0220]: associated type `CollectionItemV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:411:19
    |
411 |             Self::CollectionItemV1 { authorization_data } => {
    |                   ^^^^^^^^^^^^^^^^ associated type `CollectionItemV1` not found

error[E0220]: associated type `ProgrammableConfigItemV1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:415:19
    |
415 |             Self::ProgrammableConfigItemV1 { authorization_data } => {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ associated type `ProgrammableConfigItemV1` not found

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:426:19
    |
426 |             Self::V1 { authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:437:19
    |
437 |             Self::V1 { authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0220]: associated type `V1` not found for `Self`
   --> programs\policy-nft\src\metadata_wrapper.rs:448:19
    |
448 |             Self::V1 { authorization_data } => {
    |                   ^^ associated type `V1` not found

error[E0277]: the trait bound `u64: anchor_lang::Accounts<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 44 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-heap`
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_heap_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_heap_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default
   = note: this warning originates in the macro `$crate::custom_heap_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `custom-panic`
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `$crate::custom_panic_default` crate for guidance on how handle this unexpected cfg
   = help: the macro `$crate::custom_panic_default` may come from an old version of the `solana_program` crate, try updating your dependency with `cargo update -p solana_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `$crate::custom_panic_default` which comes from the expansion of the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\program\initialize.rs:5:10
  |
5 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\program\update.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
 --> programs\core\src\instructions\program\mod.rs:4:9
  |
4 | pub use initialize::*;
  |         ^^^^^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
5 | pub use update::*;
  |         --------- but the name `handler` in the value namespace is also re-exported here
  |
  = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\product\update.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\product\activate.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\product\deactivate.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
 --> programs\core\src\instructions\product\mod.rs:6:9
  |
6 | pub use create::*;
  |         ^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
9 | pub use deactivate::*;
  |         ------------- but the name `handler` in the value namespace is also re-exported here

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\policy\purchase.rs:8:10
  |
8 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `crate::utils::*`
 --> programs\core\src\instructions\policy\cancel.rs:4:5
  |
4 | use crate::utils::*;
  |     ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\policy\cancel.rs:8:10
  |
8 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\policy\renew.rs:8:10
  |
8 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
 --> programs\core\src\instructions\policy\mod.rs:6:9
  |
6 | pub use purchase::*;
  |         ^^^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
9 | pub use tokenize::*;
  |         ----------- but the name `handler` in the value namespace is also re-exported here

warning: unused import: `crate::utils::*`
 --> programs\core\src\instructions\claim\submit.rs:3:5
  |
3 | use crate::utils::*;
  |     ^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\submit.rs:7:10
  |
7 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\vote.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\process.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\pay.rs:7:10
  |
7 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\dispute.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\claim\arbitrate.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
  --> programs\core\src\instructions\claim\mod.rs:8:9
   |
8  | pub use submit::*;
   |         ^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
13 | pub use arbitrate::*;
   |         ------------ but the name `handler` in the value namespace is also re-exported here

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\risk\initialize_pool.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\risk\withdraw.rs:7:10
  |
7 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `anchor-debug`
 --> programs\core\src\instructions\risk\update_metrics.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^
  |
  = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
  = note: using a cfg inside a derive macro will use the cfgs from the destination crate and not the ones from the defining crate
  = help: try referring to `Accounts` crate for guidance on how handle this unexpected cfg
  = help: the derive macro `Accounts` may come from an old version of the `anchor_derive_accounts` crate, try updating your dependency with `cargo update -p anchor_derive_accounts`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: ambiguous glob re-exports
  --> programs\core\src\instructions\risk\mod.rs:7:9
   |
7  | pub use initialize_pool::*;
   |         ^^^^^^^^^^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
11 | pub use update_metrics::*;
   |         ----------------- but the name `handler` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
 --> programs\core\src\instructions\mod.rs:8:9
  |
8 | pub use program::*;
  |         ^^^^^^^^^^ the name `update` in the type namespace is first re-exported here
9 | pub use product::*;
  |         ---------- but the name `update` in the type namespace is also re-exported here

warning: ambiguous glob re-exports
  --> programs\core\src\instructions\mod.rs:8:9
   |
8  | pub use program::*;
   |         ^^^^^^^^^^ the name `handler` in the value namespace is first re-exported here
...
12 | pub use risk::*;
   |         ------- but the name `handler` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^ the name `MAX_EVIDENCE_HASH_LENGTH` in the value namespace is first re-exported here
...
18 | pub use constants::*;
   |         ------------ but the name `MAX_EVIDENCE_HASH_LENGTH` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^ the name `MAX_EVIDENCE_ATTACHMENTS` in the value namespace is first re-exported here
...
18 | pub use constants::*;
   |         ------------ but the name `MAX_EVIDENCE_ATTACHMENTS` in the value namespace is also re-exported here

warning: ambiguous glob re-exports
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^ the name `MAX_REASON_LENGTH` in the value namespace is first re-exported here
...
18 | pub use constants::*;
   |         ------------ but the name `MAX_REASON_LENGTH` in the value namespace is also re-exported here

warning: `MAX_EVIDENCE_ATTACHMENTS` is ambiguous
  --> programs\core\src\instructions\claim\submit.rs:45:23
   |
45 |                 (4 + (MAX_EVIDENCE_ATTACHMENTS * (4 + MAX_EVIDENCE_HASH_LENGTH))) +
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_ATTACHMENTS` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate
note: `MAX_EVIDENCE_ATTACHMENTS` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate
   = note: `#[warn(ambiguous_glob_imports)]` on by default

warning: `MAX_EVIDENCE_HASH_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\submit.rs:45:55
   |
45 |                 (4 + (MAX_EVIDENCE_ATTACHMENTS * (4 + MAX_EVIDENCE_HASH_LENGTH))) +
   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_HASH_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate
note: `MAX_EVIDENCE_HASH_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate

warning: `MAX_EVIDENCE_ATTACHMENTS` is ambiguous
  --> programs\core\src\instructions\claim\submit.rs:85:41
   |
85 |         params.evidence_hashes.len() <= MAX_EVIDENCE_ATTACHMENTS,
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_ATTACHMENTS` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate
note: `MAX_EVIDENCE_ATTACHMENTS` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate

warning: `MAX_EVIDENCE_HASH_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\submit.rs:91:27
   |
91 |             hash.len() <= MAX_EVIDENCE_HASH_LENGTH,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_HASH_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate
note: `MAX_EVIDENCE_HASH_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate

warning: `MAX_REASON_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\vote.rs:47:32
   |
47 |         params.reason.len() <= MAX_REASON_LENGTH,
   |                                ^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_REASON_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate
note: `MAX_REASON_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate

warning: `MAX_REASON_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\process.rs:71:25
   |
71 |         reason.len() <= MAX_REASON_LENGTH,
   |                         ^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_REASON_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate
note: `MAX_REASON_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate

warning: `MAX_REASON_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\dispute.rs:57:25
   |
57 |         reason.len() <= MAX_REASON_LENGTH,
   |                         ^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_REASON_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate
note: `MAX_REASON_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate

warning: `MAX_EVIDENCE_ATTACHMENTS` is ambiguous
  --> programs\core\src\instructions\claim\dispute.rs:64:61
   |
64 |             evidence.len() + claim.evidence_hashes.len() <= MAX_EVIDENCE_ATTACHMENTS,
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_ATTACHMENTS` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate
note: `MAX_EVIDENCE_ATTACHMENTS` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_ATTACHMENTS` to disambiguate

warning: `MAX_EVIDENCE_HASH_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\dispute.rs:70:31
   |
70 |                 hash.len() <= MAX_EVIDENCE_HASH_LENGTH,
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_EVIDENCE_HASH_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate
note: `MAX_EVIDENCE_HASH_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_EVIDENCE_HASH_LENGTH` to disambiguate

warning: `MAX_REASON_LENGTH` is ambiguous
  --> programs\core\src\instructions\claim\arbitrate.rs:69:32
   |
69 |         params.reason.len() <= MAX_REASON_LENGTH,
   |                                ^^^^^^^^^^^^^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #114095 <https://github.com/rust-lang/rust/issues/114095>
   = note: ambiguous because of multiple glob imports of a name in the same module
note: `MAX_REASON_LENGTH` could refer to the constant imported here
  --> programs\core\src\state\mod.rs:14:9
   |
14 | pub use claim::*;
   |         ^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate
note: `MAX_REASON_LENGTH` could also refer to the constant imported here
  --> programs\core\src\state\mod.rs:18:9
   |
18 | pub use constants::*;
   |         ^^^^^^^^^^^^
   = help: consider adding an explicit import of `MAX_REASON_LENGTH` to disambiguate

warning: unexpected `cfg` condition value: `anchor-debug`
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^
   |
   = note: expected values for `feature` are: `cpi`, `default`, `no-entrypoint`, `no-idl`, and `no-log-ix-name`
   = note: using a cfg inside a attribute macro will use the cfgs from the destination crate and not the ones from the defining crate
   = help: try referring to `program` crate for guidance on how handle this unexpected cfg
   = help: the attribute macro `program` may come from an old version of the `anchor_attribute_program` crate, try updating your dependency with `cargo update -p anchor_attribute_program`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `try_accounts` found for struct `TransferPolicyNFT` in the current scope
   --> programs\policy-nft\src\lib.rs:23:1
    |
23  | #[program]
    | ^^^^^^^^^^ function or associated item not found in `TransferPolicyNFT<'_>`
...
342 | pub struct TransferPolicyNFT<'info> {
    | ----------------------------------- function or associated item `try_accounts` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
            candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
   --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
    = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `TransferPolicyNFT<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\policy-nft\src\lib.rs:23:1
   |
23 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `TransferPolicyNFT<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             BurnPolicyNFT<'info>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             Ctor<'info>
           and 40 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `to_account_infos` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this function takes 1 argument but 3 arguments were supplied
   --> programs\escrow-program\src\lib.rs:15:9
    |
14  |   #[program]
    |   ----------
    |   |
    |   expected `RiskLevel`, found `&Pubkey`
    |   unexpected argument #2 of type `&[anchor_lang::prelude::AccountInfo<'_>]`
    |   unexpected argument #3 of type `&[u8]`
15  |   pub mod escrow_program {
    |  _________^
16  | |     use super::*;
17  | |
18  | |     pub fn initialize(
...   |
845 | |     fn risk_level_to_score(risk: RiskLevel) -> u8 {
    | |__________________________^
    |
note: function defined here
   --> programs\escrow-program\src\lib.rs:845:8
    |
845 |     fn risk_level_to_score(risk: RiskLevel) -> u8 {
    |        ^^^^^^^^^^^^^^^^^^^ ---------------

error[E0308]: mismatched types
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^
   | |
   | expected `Result<(), Error>`, found `u8`
   | expected `std::result::Result<(), anchor_lang::error::Error>` because of return type
   |
   = note: expected enum `std::result::Result<(), anchor_lang::error::Error>`
              found type `u8`
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `to_account_metas` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^ method not found in `u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `u64: anchor_lang::AccountsExit<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountsExit<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::AccountsExit<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 43 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0061]: this function takes 16 arguments but 5 arguments were supplied
    --> programs\policy-nft\src\lib.rs:83:9
     |
83   |           create_metadata_accounts_v3(
     |  _________^^^^^^^^^^^^^^^^^^^^^^^^^^^-
84   | |             cpi_ctx,
85   | |             data_v2,
     | |             ------- expected `Pubkey`, found `DataV2`
86   | |             true, // is_mutable
     | |             ---- expected `Option<Vec<mpl_token_metadata::state::Creator>>`, found `bool`
87   | |             true, // update_authority_is_signer
88   | |             None, // collection_details
     | |             ---- expected `bool`, found `Option<_>`
89   | |         )?;
     | |         -
     | |         |
     | |         multiple arguments are missing
     | |_________argument #11 of type `u16` is missing
     |           three arguments of type `Option<mpl_token_metadata::state::Collection>`, `Option<Uses>`, and `Option<CollectionDetails>` are missing
     |
note: function defined here
    --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\mpl-token-metadata-1.4.3\src\instruction.rs:1656:8
     |
1656 | pub fn create_metadata_accounts_v3(
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: did you mean
     |
83   |         create_metadata_accounts_v3(cpi_ctx, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* String */, /* String */, /* String */, None, /* u16 */, true, true, /* Option<mpl_token_metadata::state::Collection> */, /* Option<Uses> */, /* Option<CollectionDetails> */)?;
     |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> programs\policy-nft\src\lib.rs:83:9
   |
83 | /         create_metadata_accounts_v3(
84 | |             cpi_ctx,
85 | |             data_v2,
86 | |             true, // is_mutable
87 | |             true, // update_authority_is_signer
88 | |             None, // collection_details
89 | |         )?;
   | |__________^ the `?` operator cannot be applied to type `Instruction`
   |
   = help: the trait `Try` is not implemented for `Instruction`

error[E0277]: the trait bound `Policy: anchor_lang::AccountSerialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountSerialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountSerialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:30
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                              ^^^^^^^^^^^^^^^^ required by this bound in `Account`
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::AccountDeserialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountDeserialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountDeserialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:49
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                 ^^^^^^^^^^^^^^^^^^ required by this bound in `Account`
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::Owner` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::Owner` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::Owner`:
              ArbitratorAccount
              Claim
              ClaimsState
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:70
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                                      ^^^^^ required by this bound in `Account`
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: the method `to_account_info` exists for struct `Account<'_, Policy>`, but its trait bounds were not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ method cannot be called on `Account<'_, Policy>` due to unsatisfied trait bounds
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:1
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    | ----------------------------------------------------------------------------------- doesn't satisfy `_: AsRef<AccountInfo<'_>>` or `_: ToAccountInfo<'_>`
    |
    = note: the following trait bounds were not satisfied:
            `anchor_lang::prelude::Account<'_, Policy>: AsRef<anchor_lang::prelude::AccountInfo<'_>>`
            which is required by `anchor_lang::prelude::Account<'_, Policy>: anchor_lang::ToAccountInfo<'_>`
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `try_accounts` found for struct `CreateEscrow` in the current scope
   --> programs\escrow-program\src\lib.rs:14:1
    |
14  | #[program]
    | ^^^^^^^^^^ function or associated item not found in `CreateEscrow<'_>`
...
893 | pub struct CreateEscrow<'info> {
    | ------------------------------ function or associated item `try_accounts` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
            candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
   --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
    = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `owner` on type `anchor_lang::prelude::Account<'_, Policy>`
   --> programs\claims-processor\src\lib.rs:748:29
    |
748 |         constraint = policy.owner == authority.key(),
    |                             ^^^^^ unknown field

error[E0277]: the trait bound `Policy: anchor_lang::AccountSerialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:9
    |
750 |     pub policy: Account<'info, Policy>,
    |         ^^^^^^ the trait `anchor_lang::AccountSerialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountSerialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:30
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                              ^^^^^^^^^^^^^^^^ required by this bound in `Account`

error[E0277]: the trait bound `Policy: anchor_lang::AccountDeserialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:9
    |
750 |     pub policy: Account<'info, Policy>,
    |         ^^^^^^ the trait `anchor_lang::AccountDeserialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountDeserialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:49
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                 ^^^^^^^^^^^^^^^^^^ required by this bound in `Account`

error[E0277]: the trait bound `Policy: anchor_lang::Owner` is not satisfied
   --> programs\claims-processor\src\lib.rs:750:9
    |
750 |     pub policy: Account<'info, Policy>,
    |         ^^^^^^ the trait `anchor_lang::Owner` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::Owner`:
              ArbitratorAccount
              Claim
              ClaimsState
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
note: required by a bound in `anchor_lang::prelude::Account`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:70
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    |                                                                      ^^^^^ required by this bound in `Account`

error[E0061]: this function takes 16 arguments but 5 arguments were supplied
    --> programs\policy-nft\src\lib.rs:157:9
     |
157  |           create_metadata_accounts_v3(
     |  _________^^^^^^^^^^^^^^^^^^^^^^^^^^^-
158  | |             cpi_ctx,
159  | |             data_v2,
     | |             ------- expected `Pubkey`, found `DataV2`
160  | |             true, // is_mutable
     | |             ---- expected `Option<Vec<mpl_token_metadata::state::Creator>>`, found `bool`
161  | |             true, // update_authority_is_signer
162  | |             None, // collection_details
     | |             ---- expected `bool`, found `Option<_>`
163  | |         )?;
     | |         -
     | |         |
     | |         multiple arguments are missing
     | |_________argument #11 of type `u16` is missing
     |           three arguments of type `Option<mpl_token_metadata::state::Collection>`, `Option<Uses>`, and `Option<CollectionDetails>` are missing
     |
note: function defined here
    --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\mpl-token-metadata-1.4.3\src\instruction.rs:1656:8
     |
1656 | pub fn create_metadata_accounts_v3(
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: did you mean
     |
157  |         create_metadata_accounts_v3(cpi_ctx, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* anchor_lang::prelude::Pubkey */, /* String */, /* String */, /* String */, None, /* u16 */, true, true, /* Option<mpl_token_metadata::state::Collection> */, /* Option<Uses> */, /* Option<CollectionDetails> */)?;
     |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0277]: the `?` operator can only be applied to values that implement `Try`
   --> programs\policy-nft\src\lib.rs:157:9
    |
157 | /         create_metadata_accounts_v3(
158 | |             cpi_ctx,
159 | |             data_v2,
160 | |             true, // is_mutable
161 | |             true, // update_authority_is_signer
162 | |             None, // collection_details
163 | |         )?;
    | |__________^ the `?` operator cannot be applied to type `Instruction`
    |
    = help: the trait `Try` is not implemented for `Instruction`

error[E0277]: the trait bound `CreateEscrow<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\escrow-program\src\lib.rs:14:1
   |
14 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `CreateEscrow<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             CalculateEscrowRisk<'info>
             CompleteEscrow<'info>
             ConfirmCompletion<'info>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
           and 46 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: the method `to_account_infos` exists for struct `Account<'info, Policy>`, but its trait bounds were not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ method cannot be called on `Account<'info, Policy>` due to unsatisfied trait bounds
...
897 | pub struct Policy {
    | ----------------- doesn't satisfy `Policy: anchor_lang::AccountDeserialize`, `Policy: anchor_lang::AccountSerialize` or `Policy: anchor_lang::Owner`
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:1
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    | ----------------------------------------------------------------------------------- doesn't satisfy `_: ToAccountInfos<'_>`
    |
    = note: the following trait bounds were not satisfied:
            `Policy: anchor_lang::AccountSerialize`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountInfos<'_>`
            `Policy: anchor_lang::AccountDeserialize`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountInfos<'_>`
            `Policy: anchor_lang::Owner`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountInfos<'_>`
note: the traits `anchor_lang::AccountDeserialize`, `anchor_lang::AccountSerialize`,  and `anchor_lang::Owner` must be implemented
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:148:1
    |
148 | pub trait AccountSerialize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
159 | pub trait AccountDeserialize: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
212 | pub trait Owner {
    | ^^^^^^^^^^^^^^^
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: the method `to_account_metas` exists for struct `Account<'info, Policy>`, but its trait bounds were not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ method cannot be called on `Account<'info, Policy>` due to unsatisfied trait bounds
...
897 | pub struct Policy {
    | ----------------- doesn't satisfy `Policy: anchor_lang::AccountDeserialize`, `Policy: anchor_lang::AccountSerialize` or `Policy: anchor_lang::Owner`
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\accounts\account.rs:226:1
    |
226 | pub struct Account<'info, T: AccountSerialize + AccountDeserialize + Owner + Clone> {
    | ----------------------------------------------------------------------------------- doesn't satisfy `_: ToAccountMetas`
    |
    = note: the following trait bounds were not satisfied:
            `Policy: anchor_lang::AccountSerialize`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountMetas`
            `Policy: anchor_lang::AccountDeserialize`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountMetas`
            `Policy: anchor_lang::Owner`
            which is required by `anchor_lang::prelude::Account<'info, Policy>: anchor_lang::ToAccountMetas`
note: the traits `anchor_lang::AccountDeserialize`, `anchor_lang::AccountSerialize`,  and `anchor_lang::Owner` must be implemented
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:148:1
    |
148 | pub trait AccountSerialize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
159 | pub trait AccountDeserialize: Sized {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
212 | pub trait Owner {
    | ^^^^^^^^^^^^^^^
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::AccountSerialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountSerialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountSerialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
    = note: required for `anchor_lang::prelude::Account<'info, Policy>` to implement `anchor_lang::ToAccountMetas`
note: required by a bound in `anchor_lang::AccountsExit::exit`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:90:32
    |
90  | pub trait AccountsExit<'info>: ToAccountMetas + ToAccountInfos<'info> {
    |                                ^^^^^^^^^^^^^^ required by this bound in `AccountsExit::exit`
91  |     /// `program_id` is the currently executing program.
92  |     fn exit(&self, _program_id: &Pubkey) -> Result<()> {
    |        ---- required by a bound in this associated function
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::AccountDeserialize` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountDeserialize` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::AccountDeserialize`:
              ArbitratorAccount
              Claim
              ClaimsState
              IdlAccount
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
    = note: required for `anchor_lang::prelude::Account<'info, Policy>` to implement `anchor_lang::ToAccountMetas`
note: required by a bound in `anchor_lang::AccountsExit::exit`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:90:32
    |
90  | pub trait AccountsExit<'info>: ToAccountMetas + ToAccountInfos<'info> {
    |                                ^^^^^^^^^^^^^^ required by this bound in `AccountsExit::exit`
91  |     /// `program_id` is the currently executing program.
92  |     fn exit(&self, _program_id: &Pubkey) -> Result<()> {
    |        ---- required by a bound in this associated function
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Policy: anchor_lang::Owner` is not satisfied
   --> programs\claims-processor\src\lib.rs:741:10
    |
741 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::Owner` is not implemented for `Policy`
    |
    = help: the following other types implement trait `anchor_lang::Owner`:
              ArbitratorAccount
              Claim
              ClaimsState
              TokenAccount
              UpgradeableLoaderState
              anchor_lang::ProgramData
              anchor_spl::token::Mint
    = note: required for `anchor_lang::prelude::Account<'info, Policy>` to implement `anchor_lang::ToAccountMetas`
note: required by a bound in `anchor_lang::AccountsExit::exit`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:90:32
    |
90  | pub trait AccountsExit<'info>: ToAccountMetas + ToAccountInfos<'info> {
    |                                ^^^^^^^^^^^^^^ required by this bound in `AccountsExit::exit`
91  |     /// `program_id` is the currently executing program.
92  |     fn exit(&self, _program_id: &Pubkey) -> Result<()> {
    |        ---- required by a bound in this associated function
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `u64: anchor_lang::Accounts<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 44 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `staking-program` (lib) generated 10 warnings
error: could not compile `staking-program` (lib) due to 2 previous errors; 10 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name staking_program --edition=2021 programs\staking-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=b8095859c8434c05 -C extra-filename=-a1b5625145d8ced7 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
error[E0599]: `anchor_lang::prelude::AccountInfo<'_>` doesn't implement `std::fmt::Display`
  --> programs\escrow-program\src\lib.rs:98:59
   |
98 |             signature: ctx.accounts.transaction_signature.to_string(),
   |                                                           ^^^^^^^^^ `anchor_lang::prelude::AccountInfo<'_>` cannot be formatted with the default formatter
   |
  ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\src\account_info.rs:15:1
   |
15 | pub struct AccountInfo<'a> {
   | -------------------------- doesn't satisfy `_: Display` or `anchor_lang::prelude::AccountInfo<'_>: ToString`
   |
   = note: the following trait bounds were not satisfied:
           `anchor_lang::prelude::AccountInfo<'_>: std::fmt::Display`
           which is required by `anchor_lang::prelude::AccountInfo<'_>: ToString`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead

error[E0599]: `anchor_lang::prelude::AccountInfo<'_>` doesn't implement `std::fmt::Display`
   --> programs\escrow-program\src\lib.rs:205:59
    |
205 |             signature: ctx.accounts.transaction_signature.to_string(),
    |                                                           ^^^^^^^^^ `anchor_lang::prelude::AccountInfo<'_>` cannot be formatted with the default formatter
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\src\account_info.rs:15:1
    |
15  | pub struct AccountInfo<'a> {
    | -------------------------- doesn't satisfy `_: Display` or `anchor_lang::prelude::AccountInfo<'_>: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `anchor_lang::prelude::AccountInfo<'_>: std::fmt::Display`
            which is required by `anchor_lang::prelude::AccountInfo<'_>: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead

error[E0599]: no method named `to_account_infos` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: variable does not need to be mutable
  --> programs\dao-governance\src\lib.rs:71:13
   |
71 |         let mut dao_state_account = ctx.accounts.dao_state.to_account_info();
   |             ----^^^^^^^^^^^^^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

error[E0599]: `anchor_lang::prelude::AccountInfo<'_>` doesn't implement `std::fmt::Display`
   --> programs\escrow-program\src\lib.rs:303:59
    |
303 |             signature: ctx.accounts.transaction_signature.to_string(),
    |                                                           ^^^^^^^^^ `anchor_lang::prelude::AccountInfo<'_>` cannot be formatted with the default formatter
    |
   ::: C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\solana-program-1.9.29\src\account_info.rs:15:1
    |
15  | pub struct AccountInfo<'a> {
    | -------------------------- doesn't satisfy `_: Display` or `anchor_lang::prelude::AccountInfo<'_>: ToString`
    |
    = note: the following trait bounds were not satisfied:
            `anchor_lang::prelude::AccountInfo<'_>: std::fmt::Display`
            which is required by `anchor_lang::prelude::AccountInfo<'_>: ToString`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead

warning: variable does not need to be mutable
   --> programs\dao-governance\src\lib.rs:127:13
    |
127 |         let mut dao_state_account = ctx.accounts.dao_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0599]: no method named `to_account_metas` found for type `u64` in the current scope
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^ method not found in `u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0502]: cannot borrow `ctx.accounts.staker_account` as immutable because it is also borrowed as mutable
   --> programs\dao-governance\src\lib.rs:115:28
    |
91  |         let staker_account = &mut ctx.accounts.staker_account;
    |                              -------------------------------- mutable borrow occurs here
...
115 |                 authority: ctx.accounts.staker_account.to_account_info(),
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
...
123 |         staker_account.staked_amount -= amount;
    |         -------------- mutable borrow later used here

error[E0609]: no field `transaction_signature` on type `&mut ResolveDispute<'_>`
   --> programs\escrow-program\src\lib.rs:380:45
    |
380 |                     signature: ctx.accounts.transaction_signature.to_string(),
    |                                             ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `escrow_state`, `escrow`, `escrow_token_account`, `client_token_account` ... and 3 others

error[E0609]: no field `transaction_signature` on type `&mut ResolveDispute<'_>`
   --> programs\escrow-program\src\lib.rs:405:45
    |
405 |                     signature: ctx.accounts.transaction_signature.to_string(),
    |                                             ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `escrow_state`, `escrow`, `escrow_token_account`, `client_token_account` ... and 3 others

error[E0277]: the trait bound `u64: anchor_lang::AccountsExit<'_>` is not satisfied
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^ the trait `anchor_lang::AccountsExit<'_>` is not implemented for `u64`
    |
    = help: the following other types implement trait `anchor_lang::AccountsExit<'info>`:
              AccountLoader<'info, T>
              AddArbitrator<'info>
              ArbitrateClaim<'info>
              Box<T>
              CpiAccount<'info, T>
              CpiState<'info, T>
              CreateNonceAccount<'info>
              CreateNonceAccountWithSeed<'info>
            and 43 others
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: variable does not need to be mutable
   --> programs\dao-governance\src\lib.rs:181:13
    |
181 |         let mut dao_state_account = ctx.accounts.dao_state.to_account_info();
    |             ----^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0502]: cannot borrow `ctx.accounts.proposal` as immutable because it is also borrowed as mutable
   --> programs\dao-governance\src\lib.rs:216:32
    |
197 |         let proposal = &mut ctx.accounts.proposal;
    |                        -------------------------- mutable borrow occurs here
...
216 |         vote_record.proposal = ctx.accounts.proposal.key();
    |                                ^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
...
226 |             proposal.no_votes += staker_account.staked_amount;
    |             -------- mutable borrow later used here

error[E0599]: no variant or associated item named `Resolved` found for enum `EscrowStatus` in the current scope
    --> programs\escrow-program\src\lib.rs:415:39
     |
415  |         escrow.status = EscrowStatus::Resolved;
     |                                       ^^^^^^^^ variant or associated item not found in `EscrowStatus`
...
1240 | pub enum EscrowStatus {
     | --------------------- variant or associated item `Resolved` not found for this enum

error[E0609]: no field `resolved_at` on type `&mut anchor_lang::prelude::Account<'_, Escrow>`
   --> programs\escrow-program\src\lib.rs:423:16
    |
423 |         escrow.resolved_at = Some(clock.unix_timestamp);
    |                ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `client`, `freelancer`, `amount`, `description`, `created_at` ... and 14 others

error[E0277]: the trait bound `ClaimCategory: Default` is not satisfied
   --> programs\claims-processor\src\lib.rs:816:5
    |
806 | #[derive(Default)]
    |          ------- in this derive macro expansion
...
816 |     pub category: ClaimCategory,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `ClaimCategory`
    |
    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `std::convert::TryFrom`
 --> programs\claims-processor\src\lib.rs:3:5
  |
3 | use std::convert::TryFrom;
  |     ^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `has_account_info` found for struct `anchor_lang::prelude::UncheckedAccount<'_>` in the current scope
   --> programs\escrow-program\src\lib.rs:793:61
    |
793 |         let dispute_risk = if ctx.accounts.reputation_stats.has_account_info() {
    |                                                             ^^^^^^^^^^^^^^^^
    |
help: there is a method `to_account_info` with a similar name
    |
793 |         let dispute_risk = if ctx.accounts.reputation_stats.to_account_info() {
    |                                                             ~~~~~~~~~~~~~~~

warning: unused variable: `time_factor`
   --> programs\claims-processor\src\lib.rs:406:5
    |
406 |     time_factor: u8,
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_factor`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `amount_risk`
   --> programs\claims-processor\src\lib.rs:407:5
    |
407 |     amount_risk: u8,
    |     ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_amount_risk`

error[E0609]: no field `product_id` on type `anchor_lang::prelude::Account<'_, state::product::Product>`
  --> programs\core\src\instructions\product\update.rs:27:49
   |
27 |         seeds = [Product::SEED_PREFIX, &product.product_id.to_bytes()],
   |                                                 ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `authority`, `product_name`, `product_description`, `product_type`, `risk_factor` ... and 19 others

error[E0609]: no field `product_id` on type `anchor_lang::prelude::Account<'_, state::product::Product>`
  --> programs\core\src\instructions\policy\purchase.rs:40:21
   |
40 |             product.product_id.as_ref()
   |                     ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `authority`, `product_name`, `product_description`, `product_type`, `risk_factor` ... and 19 others

error[E0609]: no field `product_id` on type `anchor_lang::prelude::Account<'_, state::product::Product>`
  --> programs\core\src\instructions\policy\purchase.rs:26:49
   |
26 |         seeds = [Product::SEED_PREFIX, &product.product_id.to_bytes()],
   |                                                 ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `authority`, `product_name`, `product_description`, `product_type`, `risk_factor` ... and 19 others

Some errors have detailed explanations: E0061, E0063, E0117, E0220, E0277, E0432, E0599, E0603.
For more information about an error, try `rustc --explain E0061`.
Some errors have detailed explanations: E0277, E0308, E0432, E0502, E0599.
error[E0061]: this function takes 5 arguments but 11 arguments were supplied
   --> programs\core\src\instructions\policy\purchase.rs:102:26
    |
102 |     let premium_amount = calculate_premium(
    |                          ^^^^^^^^^^^^^^^^^
    |
note: function defined here
   --> programs\core\src\utils\risk_calculations.rs:90:8
    |
90  | pub fn calculate_premium(
    |        ^^^^^^^^^^^^^^^^^
91  |     coverage_amount: u64,
    |     --------------------
92  |     coverage_period_days: u16,
    |     -------------------------
93  |     risk_factor: u8,
    |     ---------------
94  |     base_premium_rate: u16,
    |     ----------------------
95  |     product_risk_multiplier: u16
    |     ----------------------------
help: did you mean
    |
102 |     let premium_amount = calculate_premium(params.coverage_amount, params.period_days, params.job_type.risk_weight(&program_state.job_type_risk_weights), product.risk_adjustment_factor, product.base_premium_rate)?;
    |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `product_id` on type `&mut anchor_lang::prelude::Account<'_, state::product::Product>`
   --> programs\core\src\instructions\policy\purchase.rs:130:33
    |
130 |     policy.product_id = product.product_id;
    |                                 ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `product_name`, `product_description`, `product_type`, `risk_factor` ... and 19 others

error[E0061]: this function takes 5 arguments but 4 arguments were supplied
   --> programs\core\src\instructions\policy\purchase.rs:143:22
    |
143 |       let risk_score = calculate_risk_score(
    |                        ^^^^^^^^^^^^^^^^^^^^
144 | /         params.job_type.risk_weight(&program_state.job_type_risk_weights),
145 | |         params.industry.risk_weight(&program_state.industry_risk_weights),
    | |         -----------------------------------------------------------------
    | |_________|_______________________________________________________________|
    |           |                                                               two arguments of type `u64` and `u16` are missing
    |           unexpected argument #2 of type `u8`
    |
note: function defined here
   --> programs\core\src\utils\risk_calculations.rs:119:8
    |
119 | pub fn calculate_risk_score(
    |        ^^^^^^^^^^^^^^^^^^^^
120 |     coverage_amount: u64,
    |     --------------------
121 |     coverage_period_days: u16,
    |     -------------------------
122 |     client_history_score: u8,
    |     ------------------------
123 |     project_complexity: u8,
    |     ----------------------
124 |     market_sector_risk: u8
    |     ----------------------
help: did you mean
    |
143 |     let risk_score = calculate_risk_score(/* u64 */, /* u16 */, reputation_score, claims_history, params.job_type.risk_weight(&program_state.job_type_risk_weights))?;
    |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error[E0609]: no field `policies_issued` on type `&mut anchor_lang::prelude::Account<'_, state::product::Product>`
   --> programs\core\src\instructions\policy\purchase.rs:169:13
    |
169 |     product.policies_issued += 1;
    |             ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `authority`, `product_name`, `product_description`, `product_type`, `risk_factor` ... and 19 others

warning: `policy-nft` (lib) generated 10 warnings
error: could not compile `policy-nft` (lib) due to 50 previous errors; 10 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name policy_nft --edition=2021 programs\policy-nft\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=28c8731f331f3d5f -C extra-filename=-0c5462667f99a22a --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern borsh=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libborsh-84362225174a195b.rmeta --extern borsh_derive=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\borsh_derive-aa7f871f9c532e9c.dll --extern mpl_token_metadata=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libmpl_token_metadata-a288b889fd49ae3a.rmeta --extern solana_program=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libsolana_program-28c9b9df80259448.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
warning: `dao-governance` (lib) generated 14 warnings
error: could not compile `dao-governance` (lib) due to 11 previous errors; 14 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name dao_governance --edition=2021 programs\dao-governance\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=71e459729c5a4575 -C extra-filename=-58ccb14fa72a1d51 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
error[E0433]: failed to resolve: use of undeclared crate or module `__cpi_client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:594:10
    |
594 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__cpi_client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0433]: failed to resolve: use of undeclared crate or module `__cpi_client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:686:10
    |
686 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__cpi_client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0433]: failed to resolve: use of undeclared crate or module `__cpi_client_accounts_u64`
   --> programs\claims-processor\src\lib.rs:753:10
    |
753 | #[derive(Accounts)]
    |          ^^^^^^^^ use of undeclared crate or module `__cpi_client_accounts_u64`
    |
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0277, E0308, E0422, E0432, E0433, E0599, E0603, E0609.
warning: `claims-processor` (lib) generated 15 warnings
error: could not compile `claims-processor` (lib) due to 63 previous errors; 15 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name claims_processor --edition=2021 programs\claims-processor\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=413b9b631550f47d -C extra-filename=-a153f6b3b5909fc4 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
error[E0277]: the trait bound `Option<anchor_lang::prelude::AccountInfo<'info>>: anchor_lang::Accounts<'_>` is not satisfied
 --> programs\core\src\instructions\claim\vote.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `Option<anchor_lang::prelude::AccountInfo<'info>>`
  |
  = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
            AccountLoader<'info, T>
            Box<T>
            CpiAccount<'info, T>
            CpiState<'info, T>
            CreateNonceAccount<'info>
            CreateNonceAccountWithSeed<'info>
            Ctor<'info>
            IdlAccounts<'info>
          and 53 others
  = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `to_account_infos` found for enum `Option` in the current scope
   --> programs\core\src\instructions\claim\vote.rs:6:10
    |
6   | #[derive(Accounts)]
    |          ^^^^^^^^ method not found in `Option<AccountInfo<'info>>`
    |
note: the method `to_account_infos` exists on the type `anchor_lang::prelude::AccountInfo<'info>`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:120:5
    |
120 |     fn to_account_infos(&self) -> Vec<AccountInfo<'info>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `to_account_metas` found for enum `Option` in the current scope
   --> programs\core\src\instructions\claim\vote.rs:6:10
    |
6   | #[derive(Accounts)]
    |          ^^^^^^^^ method not found in `Option<AccountInfo<'info>>`
    |
note: the method `to_account_metas` exists on the type `anchor_lang::prelude::AccountInfo<'info>`
   --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\lib.rs:113:5
    |
113 |     fn to_account_metas(&self, is_signer: Option<bool>) -> Vec<AccountMeta>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Option<anchor_lang::prelude::AccountInfo<'info>>: anchor_lang::AccountsExit<'_>` is not satisfied
 --> programs\core\src\instructions\claim\vote.rs:6:10
  |
6 | #[derive(Accounts)]
  |          ^^^^^^^^ the trait `anchor_lang::AccountsExit<'_>` is not implemented for `Option<anchor_lang::prelude::AccountInfo<'info>>`
  |
  = help: the following other types implement trait `anchor_lang::AccountsExit<'info>`:
            AccountLoader<'info, T>
            Box<T>
            CpiAccount<'info, T>
            CpiState<'info, T>
            CreateNonceAccount<'info>
            CreateNonceAccountWithSeed<'info>
            Ctor<'info>
            IdlAccounts<'info>
          and 52 others
  = note: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)

Some errors have detailed explanations: E0061, E0277, E0308, E0432, E0599, E0603, E0609.
warning: `escrow-program` (lib) generated 13 warnings
error: could not compile `escrow-program` (lib) due to 22 previous errors; 13 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name escrow_program --edition=2021 programs\escrow-program\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=49fef776f7dd5dcf -C extra-filename=-b13b10bf7cf6ab78 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
error[E0599]: no function or associated item named `try_accounts` found for struct `create::CreateProduct` in the current scope
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ function or associated item not found in `CreateProduct<'_>`
   |
  ::: programs\core\src\instructions\product\create.rs:7:1
   |
7  | pub struct CreateProduct<'info> {
   | ------------------------------- function or associated item `try_accounts` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
           candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
  --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `create::CreateProduct<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `create::CreateProduct<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             Ctor<'info>
             IdlAccounts<'info>
           and 53 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `try_accounts` found for struct `deposit::DepositCapital` in the current scope
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ function or associated item not found in `DepositCapital<'_>`
   |
  ::: programs\core\src\instructions\risk\deposit.rs:8:1
   |
8  | pub struct DepositCapital<'info> {
   | -------------------------------- function or associated item `try_accounts` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
           candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
  --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `deposit::DepositCapital<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `deposit::DepositCapital<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             Ctor<'info>
             IdlAccounts<'info>
           and 53 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `try_accounts` found for struct `simulate::SimulateRisk` in the current scope
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ function or associated item not found in `SimulateRisk<'_>`
   |
  ::: programs\core\src\instructions\risk\simulate.rs:8:1
   |
8  | pub struct SimulateRisk<'info> {
   | ------------------------------ function or associated item `try_accounts` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `try_accounts`, perhaps you need to implement it:
           candidate #1: `anchor_lang::Accounts`
help: there is a method `try_into` with a similar name, but with different arguments
  --> /rustc/4eb161250e340c8f48f66e2b929ef4a5bed7c181\library\core\src\convert\mod.rs:613:5
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `simulate::SimulateRisk<'_>: anchor_lang::Accounts<'_>` is not satisfied
  --> programs\core\src\lib.rs:52:1
   |
52 | #[program]
   | ^^^^^^^^^^ the trait `anchor_lang::Accounts<'_>` is not implemented for `simulate::SimulateRisk<'_>`
   |
   = help: the following other types implement trait `anchor_lang::Accounts<'info>`:
             AccountLoader<'info, T>
             Box<T>
             CpiAccount<'info, T>
             CpiState<'info, T>
             CreateNonceAccount<'info>
             CreateNonceAccountWithSeed<'info>
             Ctor<'info>
             IdlAccounts<'info>
           and 53 others
note: required by a bound in `anchor_lang::context::Context::<'a, 'b, 'c, 'info, T>::new`
  --> C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\anchor-lang-0.24.2\src\context.rs:50:28
   |
50 | impl<'a, 'b, 'c, 'info, T: Accounts<'info>> Context<'a, 'b, 'c, 'info, T> {
   |                            ^^^^^^^^^^^^^^^ required by this bound in `Context::<'a, 'b, 'c, 'info, T>::new`
51 |     pub fn new(
   |            --- required by a bound in this associated function
   = note: this error originates in the attribute macro `program` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0502]: cannot borrow `ctx.accounts.risk_pool` as immutable because it is also borrowed as mutable
   --> programs\core\src\instructions\policy\cancel.rs:104:24
    |
77  |     let risk_pool = &mut ctx.accounts.risk_pool;
    |                     --------------------------- mutable borrow occurs here
...
104 |             authority: ctx.accounts.risk_pool.to_account_info(),
    |                        ^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
...
125 |     risk_pool.total_coverage_liability -= policy.coverage_amount;
    |     --------- mutable borrow later used here

warning: unused variable: `policy_pubkey`
   --> programs\core\src\instructions\claim\vote.rs:115:20
    |
115 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_policy_pubkey`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `claim_pubkey`
   --> programs\core\src\instructions\claim\vote.rs:115:44
    |
115 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                                            ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_claim_pubkey`

warning: unused variable: `policy_pubkey`
   --> programs\core\src\instructions\claim\process.rs:116:20
    |
116 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_policy_pubkey`

warning: unused variable: `claim_pubkey`
   --> programs\core\src\instructions\claim\process.rs:116:44
    |
116 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                                            ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_claim_pubkey`

error[E0502]: cannot borrow `ctx.accounts.risk_pool` as immutable because it is also borrowed as mutable
   --> programs\core\src\instructions\claim\pay.rs:100:20
    |
88  |     let risk_pool = &mut ctx.accounts.risk_pool;
    |                     --------------------------- mutable borrow occurs here
...
100 |         authority: ctx.accounts.risk_pool.to_account_info(),
    |                    ^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
...
137 |     risk_pool.total_claims_paid += claim.amount;
    |     --------- mutable borrow later used here

warning: unused variable: `policy_pubkey`
   --> programs\core\src\instructions\claim\pay.rs:158:20
    |
158 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_policy_pubkey`

warning: unused variable: `claim_pubkey`
   --> programs\core\src\instructions\claim\pay.rs:158:44
    |
158 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                                            ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_claim_pubkey`

warning: unused variable: `policy_pubkey`
  --> programs\core\src\instructions\claim\dispute.rs:94:20
   |
94 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
   |                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_policy_pubkey`

warning: unused variable: `claim_pubkey`
  --> programs\core\src\instructions\claim\dispute.rs:94:44
   |
94 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
   |                                            ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_claim_pubkey`

warning: unused variable: `policy_pubkey`
   --> programs\core\src\instructions\claim\arbitrate.rs:108:20
    |
108 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                    ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_policy_pubkey`

warning: unused variable: `claim_pubkey`
   --> programs\core\src\instructions\claim\arbitrate.rs:108:44
    |
108 | fn get_claim_index(policy_pubkey: &Pubkey, claim_pubkey: Pubkey) -> Result<u8> {
    |                                            ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_claim_pubkey`

warning: unused variable: `clock`
  --> programs\core\src\instructions\risk\withdraw.rs:60:9
   |
60 |     let clock = Clock::get()?;
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_clock`

error[E0502]: cannot borrow `ctx.accounts.risk_pool` as immutable because it is also borrowed as mutable
   --> programs\core\src\instructions\risk\withdraw.rs:95:20
    |
61  |     let risk_pool = &mut ctx.accounts.risk_pool;
    |                     --------------------------- mutable borrow occurs here
...
95  |         authority: ctx.accounts.risk_pool.to_account_info(),
    |                    ^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
...
107 |     risk_pool.total_capital -= params.amount;
    |     --------- mutable borrow later used here

Some errors have detailed explanations: E0061, E0277, E0432, E0502, E0599, E0609.
warning: `freelance-shield-core` (lib) generated 53 warnings
error: could not compile `freelance-shield-core` (lib) due to 43 previous errors; 53 warnings emitted

Caused by:
  process didn't exit successfully: `C:\Users\User\.rustup\toolchains\1.85.1-x86_64-pc-windows-msvc\bin\rustc.exe --crate-name freelance_shield_core --edition=2021 programs\core\src\lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type cdylib --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg "feature=\"default\"" --check-cfg cfg(docsrs,test) --check-cfg "cfg(feature, values(\"cpi\", \"default\", \"no-entrypoint\", \"no-idl\", \"no-log-ix-name\"))" -C metadata=30bf5b2d22e93124 -C extra-filename=-6395fb16ce128390 --out-dir C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps -C incremental=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\incremental -L dependency=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps --extern anchor_lang=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_lang-a9a7271d09e12f3c.rmeta --extern anchor_spl=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libanchor_spl-d79ad30e20f349db.rmeta --extern spl_associated_token_account=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_associated_token_account-5cf6e5b1de8fe627.rmeta --extern spl_token=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libspl_token-aae92c910373d728.rmeta --extern thiserror=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libthiserror-cd68f7eb58314aa1.rmeta --extern zeroize=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\deps\libzeroize-ab67ac47317ba764.rmeta -C target-cpu=native -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Projects\FreelanceShield\freelance-safeguard-contracts\target\debug\build\blake3-a8d830e43064262d\out -L native=C:\Users\User\.cargo\registry\src\index.crates.io-1949cf8c6b5b557f\windows_x86_64_msvc-0.52.6\lib` (exit code: 1)
