{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-v4/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-v4/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ICoverNFT.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts-v4/token/ERC721/IERC721.sol\";\n\ninterface ICoverNFT is IERC721 {\n\n  function isApprovedOrOwner(address spender, uint tokenId) external returns (bool);\n\n  function mint(address to) external returns (uint tokenId);\n\n  function changeOperator(address newOperator) external;\n\n  function totalSupply() external view returns (uint);\n\n  function name() external view returns (string memory);\n\n  error NotOperator();\n  error NotMinted();\n  error WrongFrom();\n  error InvalidRecipient();\n  error InvalidNewOperatorAddress();\n  error InvalidNewNFTDescriptorAddress();\n  error NotAuthorized();\n  error UnsafeRecipient();\n  error AlreadyMinted();\n\n}\n"
    },
    "contracts/interfaces/ICoverNFTDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.5.0;\n\ninterface ICoverNFTDescriptor {\n\n  function tokenURI(uint tokenId) external view returns (string memory);\n\n}\n"
    },
    "contracts/modules/cover/CoverNFT.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity ^0.8.18;\n\nimport \"../../interfaces/ICoverNFT.sol\";\nimport \"../../interfaces/ICoverNFTDescriptor.sol\";\n\n/// @dev Based on Solmate https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol\ncontract CoverNFT is ICoverNFT {\n\n  string public name;\n  string public symbol;\n\n  mapping(uint => address) internal _ownerOf;\n  mapping(address => uint) internal _balanceOf;\n  mapping(uint => address) public getApproved;\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n  uint96 internal _totalSupply;\n  address public operator;\n  address public nftDescriptor;\n\n  modifier onlyOperator {\n    if (msg.sender != operator) revert NotOperator();\n    _;\n  }\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    address _operator,\n    address _nftDescriptor\n  ) {\n    name = _name;\n    symbol = _symbol;\n    operator = _operator;\n    nftDescriptor = _nftDescriptor;\n  }\n\n  // operator functions\n\n  function changeOperator(address _newOperator) public onlyOperator {\n    if (_newOperator == address(0)) revert InvalidNewOperatorAddress();\n    operator = _newOperator;\n  }\n\n  function changeNFTDescriptor(address _newNFTDescriptor) public onlyOperator {\n    if (_newNFTDescriptor == address(0)) revert InvalidNewNFTDescriptorAddress();\n    nftDescriptor = _newNFTDescriptor;\n  }\n\n  // minting and supply\n\n  function mint(address to) external onlyOperator returns (uint id) {\n\n    if (to == address(0)) revert InvalidRecipient();\n\n    // counter overflow is incredibly unrealistic\n    unchecked {\n      id = ++_totalSupply;\n      _balanceOf[to]++;\n    }\n\n    _ownerOf[id] = to;\n\n    emit Transfer(address(0), to, id);\n  }\n\n  function totalSupply() public view returns (uint) {\n    return _totalSupply;\n  }\n\n  // ERC165\n\n  function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n    return\n      interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n      interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n      interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n  }\n\n  // ERC721\n\n  function tokenURI(uint id) public view virtual returns (string memory uri) {\n    if (_ownerOf[id] == address(0)) revert NotMinted();\n    return ICoverNFTDescriptor(nftDescriptor).tokenURI(id);\n  }\n\n  function ownerOf(uint id) public view returns (address owner) {\n    if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\n  }\n\n  function balanceOf(address owner) public view returns (uint) {\n    if (owner == address(0)) revert NotMinted();\n    return _balanceOf[owner];\n  }\n\n  function approve(address spender, uint id) public {\n    address owner = _ownerOf[id];\n    if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert NotAuthorized();\n    getApproved[id] = spender;\n    emit Approval(owner, spender, id);\n  }\n\n  function setApprovalForAll(address spender, bool approved) public {\n    isApprovedForAll[msg.sender][spender] = approved;\n    emit ApprovalForAll(msg.sender, spender, approved);\n  }\n\n  /// @dev `ownerOf` and `getApproved` throw if the token doesn't exist as per ERC721 spec\n  /// @dev as a consequence this function will throw as well in that case\n  function isApprovedOrOwner(address spender, uint tokenId) external view returns (bool) {\n    address owner = ownerOf(tokenId);\n    return spender == owner || isApprovedForAll[owner][spender] || spender == getApproved[tokenId];\n  }\n\n  function transferFrom(address from, address to, uint id) public {\n    if (from != _ownerOf[id]) revert WrongFrom();\n    if (to == address(0)) revert InvalidRecipient();\n\n    if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id]) {\n      revert NotAuthorized();\n    }\n\n    // underflow of the sender's balance is impossible because we check for\n    // ownership above and the recipient's balance can't realistically overflow\n    unchecked {\n      _balanceOf[from]--;\n      _balanceOf[to]++;\n    }\n\n    _ownerOf[id] = to;\n    delete getApproved[id];\n\n    emit Transfer(from, to, id);\n  }\n\n  function safeTransferFrom(address from, address to, uint id) public {\n    transferFrom(from, to, id);\n    if (to.code.length != 0 && ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") != ERC721TokenReceiver.onERC721Received.selector) {\n      revert UnsafeRecipient();\n    }\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint id,\n    bytes calldata data\n  ) public {\n    transferFrom(from, to, id);\n    if (to.code.length != 0 && ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) != ERC721TokenReceiver.onERC721Received.selector) {\n      revert UnsafeRecipient();\n    }\n  }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @dev Based on (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n  function onERC721Received(address, address, uint, bytes calldata) external virtual returns\n  (bytes4) {\n    return ERC721TokenReceiver.onERC721Received.selector;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}